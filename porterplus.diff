Only in ./: class.aspplayground.php
Only in /home/zero/porterplus: class.bbcode.php
diff /home/zero/porterplus/class.bbpress.php ./class.bbpress.php
8a9,11
>  
> $Supported['bbPress'] = array('name'=>'bbPress 1.*', 'prefix' => 'bb_');
> 
69c72
<          'form_slug'=>'UrlCode',
---
>          'forum_slug'=>'UrlCode',
72a76
>          lower(forum_slug) as forum_slug,
95c99
<          'post_text' => 'Body',
---
>          'post_text' => array('Column'=>'Body', 'Filter'=>'bbPressTrim'),
97d100
<          'Body' => array('Column'=>'Body','Filter'=>'bbPressTrim'),
Only in ./: class.drupal.php
Only in /home/zero/porterplus: class.exportcontroller1.php
diff /home/zero/porterplus/class.exportcontroller.php ./class.exportcontroller.php
10d9
< 
13,15d11
<       /*Porter Plus*/
<    protected $Options = array();
<    /*Porter Plus*/
34a31,47
>       
>       $this->Ex = new ExportModel;
>       $this->Ex->Controller = $this;
>       $this->Ex->SetConnection($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'], $this->DbInfo['dbname']);
>       $this->Ex->Prefix = $this->DbInfo['prefix'];
>       $this->Ex->Destination = $this->Param('dest', 'file');
>       $this->Ex->DestDb = $this->Param('destdb', NULL);
>       $this->Ex->TestMode = $this->Param('test', FALSE);
>       $this->Ex->UseStreaming = FALSE; //$this->UseStreaming;
>    }
>    
>    public function CdnPrefix() {
>       $Cdn = rtrim($this->Param('cdn', ''), '/');
>       if ($Cdn)
>          $Cdn .= '/';
>       
>       return $Cdn;
46,54d58
<          // Create db object
<          $Ex = new ExportModel;
<          $Ex->Controller = $this;
<          $this->Ex = $Ex;
<          $Ex->SetConnection($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'], $this->DbInfo['dbname']);
<          $Ex->Prefix = $this->DbInfo['prefix'];
<          $Ex->Destination = $this->Param('dest', 'file');
<          $Ex->DestDb = $this->Param('destdb', NULL);
<          $Ex->TestMode = $this->Param('test', FALSE);
56d59
<          $Ex->UseStreaming = $this->UseStreaming;
58c61
<          $Msg = $Ex->VerifySource($this->SourceTables);
---
>          $Msg = $this->Ex->VerifySource($this->SourceTables);
61,62c64,65
<             $Ex->UseCompression(TRUE);
<             $Ex->FilenamePrefix = $this->DbInfo['dbname'];
---
>             $this->Ex->UseCompression(TRUE);
>             $this->Ex->FilenamePrefix = $this->DbInfo['dbname'];
64,79c67,72
< 	     /*Porter Plus*/
< 	    $ParseFilter =array(
< 		'Body'=>array($Ex, 'ParseOperations'),
< 		'Name'=>array($Ex, 'ParseOperations'),
< 		'Format'=>array($Ex, 'ParseOperations')
< 	   );
< 	   $Ex->SetTopLevelFilters(array(
< 	   'Comment' => $ParseFilter,
< 	   'Discussion' => $ParseFilter,
< 	   'ConversationMessage' => $ParseFilter
< 	   ));
< 	   
< 	   $Ex->SetOptions($this->Options);
< 	
< 	    /*Porter Plus*/
<             $this->ForumExport($Ex);
---
>             
> //            ob_start();
>             $this->ForumExport($this->Ex);
> //            $Errors = ob_get_clean();
>             
>             $Msg = $this->Ex->Comments;
82c75
<             if($Ex->UseStreaming)
---
>             if($this->Ex->UseStreaming)
85c78
<                ViewExportResult($Ex->Comments, 'Info', $Ex->Path);
---
>                ViewExportResult($Msg, 'Info', $this->Ex->Path);
98,121d90
< 	/*Porter Plus*/
< 	if(!defined('CONSOLE') && in_array('replsearch',$_POST['repl'])){
< 		$_POST['searchreplace']=array();
< 		foreach($_POST['replsearch'] As $ReplI => $ReplV){
< 
< 			if($ReplV){
< 				$_POST['searchreplace'][$ReplV]=array("repl"=>$_POST['replrepl'][$ReplI], "regexp"=>$_POST['replexp'][$ReplI]);
< 			}
< 		}
< 		unset($_POST['replrepl']);
< 		unset($_POST['replexp']);
< 		unset($_POST['replsearch']);
< 		$this->Options=$_POST['repl'];
< 	}else{
< 		$this->Options=array(
< 			'utf8force' => $_POST['utf8force'],
< 			'bbcode2html' => $_POST['bbcode2html'],
< 			'phpBBfixes' => $_POST['phpBBfixes']
< 		);
< 	}
< 
< 	$this->Options['searchreplace']=$_POST['searchreplace'];
< 
< 	/*Porter Plus*/
146c115
<       if($C = mysql_connect($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'])) {
---
>       if($C = @mysql_connect($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'])) {
154c123
<             $Result = 'Could not find database &ldquo;'.$this->DbInfo['dbname'].'&rdquo;.';
---
>             $Result = "Could not find database '{$this->DbInfo['dbname']}'.";
163c132
< ?>
---
> ?>
\ No newline at end of file
diff /home/zero/porterplus/class.exportmodel.php ./class.exportmodel.php
18a19
>    public $CaptureOnly = FALSE;
27a29,33
>    
>    /**
>     * @var int The chunk size when exporting large tables.
>     */
>    public $ChunkSize = 100000;
32a39,43
>    
>    public $DestPrefix = 'GDN_z';
>    
>    public static $EscapeSearch = array();
>    public static $EscapeReplace = array();
35c46
<    protected $_File = NULL;
---
>    public $File = NULL;
41,42c52,53
< 
<    protected $_Limit = 20000;
---
>    
>    public static $Mb = FALSE;
58a70,71
>    
>    protected $_QueryStructures = array();
63,66c76,81
<    /*Porter Plus*/
<    private $_TopLevelFilters=array();
<    protected $_Options=array();
<    /*Porter Plus*/
---
>    /**
>     * @var string 
>     */
>    public $SourcePrefix = '';
>    
>    public $ScriptCreateTable = TRUE;
72a88
>             'ActivityType' => 'varchar(20)',
74a91,92
>             'NotifyUserID' => 'int',
>             'HeadlineFormat' => 'varchar(255)',
75a94
>             'Format' => 'varchar(10)',
77c96,97
<             'DateInserted' => 'datetime'),
---
>             'DateInserted' => 'datetime',
>             'InsertIPAddress' => 'varchar(15)'),
80a101
>             'UrlCode' => 'varchar(255)',
102a124
>             'Subject' => 'varchar(255)',
114c136,137
<             'DateInserted' => 'datetime'),
---
>             'DateInserted' => 'datetime',
>             'InsertIPAddress' => 'varchar(15)'),
133c156,157
<             'Sink' => 'tinyint'),
---
>             'Sink' => 'tinyint',
>             'Type' => 'varchar(20)'),
144c168,170
<             'ForeignTable' => 'varchar(24)'
---
>             'ForeignTable' => 'varchar(24)',
>             'ImageWidth' => 'int',
>             'ImageHeight' => 'int'
147a174,176
>             'JunctionTable' => 'varchar(100)',
>             'JunctionColumn' => 'varchar(100)',
>             'JunctionID' => 'int',
155a185,218
>       'Poll' => array(
>             'PollID' => 'int',
>             'Name' => 'varchar(255)',
>             'DiscussionID' => 'int',
>             'Anonymous' => 'tinyint',
>             'DateInserted' => 'datetime',
>             'InsertUserID' => 'int',
>             'DateUpdated' => 'datetime',
>             'UpdateUserID' => 'int'
>           ),
>       'PollOption' => array(
>             'PollOptionID' => 'int',
>             'PollID' => 'int',
>             'Body' => 'varchar(500)',
>             'Format' => 'varchar(20)',
>             'Sort' => 'smallint',
>             'DateInserted' => 'datetime',
>             'InsertUserID' => 'int',
>             'DateUpdated' => 'datetime',
>             'UpdateUserID' => 'int'
>           ),
>       'PollVote' => array(
>             'UserID' => 'int',
>             'PollOptionID' => 'int',
>             'DateInserted' => 'datetime'
>           ),
>       'Rank' => array(
>             'RankID' => 'int',
>             'Name' => 'varchar(100)',
>             'Level' => 'smallint',
>             'Label' => 'varchar(255)',
>             'Body' => 'text',
>             'Attributes' => 'text'
>           ),
173c236,237
<             'Password' => 'varbinary(34)',
---
>             'Password' => 'varbinary(100)',
>             'HashMethod' => 'varchar(10)',
174a239,240
>             'Title' => 'varchar(100)',
>             'Location' => 'varchar(100)',
186a253
>             'LastIPAddress' => 'varchar(15)',
189c256,257
<             'ShowEmail' => 'tinyint'),
---
>             'ShowEmail' => 'tinyint',
>             'RankID' => 'int'),
198a267
>             'Deleted' => 'tinyint(1)',
209a279,288
>       'UserNote' => array(
>             'UserNoteID' => 'int',
>             'Type' => 'varchar(10)',
>             'UserID' => 'int',
>             'Body' => 'text',
>             'Format' => 'varchar(10)',
>             'InsertUserID' => 'int',
>             'DateInserted' => 'datetime',
>             'InsertIPAddress' => 'varchar(15)'
>          ),
212c291,328
<             'RoleID' => 'int')
---
>             'RoleID' => 'int'),
>       'Ban' => array(
>             'BanID' => 'int',
>             'BanType' => 'varchar(50)',
>             'BanValue' => 'varchar(50)',
>             'Notes' => 'varchar(255)',
>             'CountUsers' => 'int',
>             'CountBlockRegistrations' => 'int',
>             'InsertUserID' => 'int',
>             'DateInserted' => 'datetime'),
>       'Group' => array(
>             'GroupID' => 'int',
>             'Name' => 'varchar(255)',
>             'Description' => 'text',
>             'Format' => 'varchar(10)',
>             'CategoryID' => 'int',
>             'Icon' => 'varchar(255)',
>             'Banner' => 'varchar(255)',
>             'Privacy' => 'varchar(255)',
>             'Registration' => 'varchar(255)',
>             'Visibility' => 'varchar(255)',
>             'CountMembers' => 'int',
>             'CountDiscussions' => 'int',
>             'DateLastComment' => 'datetime',
>             'DateInserted' => 'datetime',
>             'InsertUserID' => 'int',
>             'DateUpdated' => 'datetime',
>             'UpdateUserID' => 'int',
>             'Attributes' => 'text'
>       ),
>       'UserGroup' => array(
>             'UserGroupID' => 'int',
>             'GroupID' => 'int',
>             'UserID' => 'int',
>             'DateInserted' => 'datetime',
>             'InsertUserID' => 'int',
>             'Role' => 'varchar(255)'
>       )
215a332,333
>    
>    public $TestLimit = 10;
228a347,354
>    
>    public function __construct() {
>       self::$Mb = function_exists('mb_detect_encoding');
>       
>       // Set the search and replace to escape strings.
>       self::$EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
>       self::$EscapeReplace = array(self::ESCAPE.self::ESCAPE, self::ESCAPE.self::DELIM, self::ESCAPE.self::NEWLINE, self::ESCAPE.self::QUOTE);
>    }
247c373,374
<       fwrite($fp, 'Vanilla Export: '.$this->Version());
---
>       $Comment = 'Vanilla Export: '.$this->Version();
>       
249c376
<          fwrite($fp, self::DELIM.' Source: '.$Source);
---
>          $Comment .= self::DELIM.' Source: '.$Source;
251c378
<          fwrite($fp, self::DELIM." $Key: $Value");
---
>          $Comment .= self::DELIM." $Key: $Value";
253c380,385
<       fwrite($fp, self::NEWLINE.self::NEWLINE);
---
>       
>       if ($this->CaptureOnly)
>          $this->Comment($Comment);
>       else
>          fwrite($fp, $Comment.self::NEWLINE.self::NEWLINE);
>      
265,267c397,410
<       fwrite($this->_File, self::COMMENT.' '.str_replace(self::NEWLINE, self::NEWLINE.self::COMMENT.' ', $Message).self::NEWLINE);
<       if($Echo)
<          $this->Comments[] = $Message;
---
>       if ($this->Destination == 'file')
>          $Char = self::COMMENT;
>       else
>          $Char = '--';
>          
>       $Comment = $Char.' '.str_replace(self::NEWLINE, self::NEWLINE.self::COMMENT.' ', $Message).self::NEWLINE;
>       
>       fwrite($this->File, $Comment);
>       if($Echo) {
>          if (defined('CONSOLE'))
>             echo $Comment;
>          else
>             $this->Comments[] = $Message;
>       }
276a420
>       $this->Comment($this->Path);
279a424,431
>       if ($this->TestMode || $this->Controller->Param('dumpsql') || $this->CaptureOnly) {
>          $Queries = implode("\n\n", $this->Queries);
>          if ($this->Destination == 'database')
>             fwrite($this->File, $Queries);
>          else
>             $this->Comment($Queries, TRUE);
>       }
>       
284c436
<             gzclose($this->_File);
---
>             gzclose($this->File);
286,291c438
<             fclose($this->_File);
<       }
< 
<       if ($this->TestMode || $this->Controller->Param('dumpsql')) {
<          $Queries = '<pre>'.implode("\n\n", $this->Queries).'</pre>';
<          $this->Comment($Queries, TRUE);
---
>             fclose($this->File);
316c463,552
<       fwrite($this->_File, self::NEWLINE);
---
>       fwrite($this->File, self::NEWLINE);
>    }
>    
>    protected function _ExportTableImport($TableName, $Query, $Mappings = array()) {
>       // Backup the settings.
>       $DestinationBak = $this->Destination;
>       $this->Destination = 'file';
>       
>       $_FileBak = $this->File;
>       $Path = dirname(__FILE__).'/'.$TableName.'.csv';
>       $this->Comment("Exporting To: $Path");
>       $fp = fopen($Path, 'wb');
>       $this->File = $fp;
>       
>       // First export the file to a file.
>       $this->_ExportTable($TableName, $Query, $Mappings, array('NoEndline' => TRUE));
>       
>       // Now define a table to import into.
>       $this->_CreateExportTable($TableName, $Query, $Mappings);
>       
>       // Now load the data.
>       $Sql = "load data local infile '$Path' into table {$this->DestDb}.{$this->DestPrefix}$TableName
>          character set utf8
>          columns terminated by ','
>          optionally enclosed by '\"'
>          escaped by '\\\\'
>          lines terminated by '\\n'
>          ignore 2 lines";
>       $this->Query($Sql);
>       
>       // Restore the settings.
>       $this->Destination = $DestinationBak;
>       $this->File = $_FileBak;
>    }
>    
>    public function ExportBlobs($Sql, $BlobColumn, $PathColumn, $Thumbnail = FALSE) {
>       $this->Comment("Exporting blobs...");
>       
>       $Result = $this->Query($Sql);
>       $Count = 0;
>       while ($Row = mysql_fetch_assoc($Result)) {
>          // vBulletin attachment hack (can't do this in MySQL)
>          if (strpos($Row[$PathColumn], '.attach') && strpos($Row[$PathColumn], 'attachments/') !== FALSE) {
>             $PathParts = explode('/', $Row[$PathColumn]); // 3 parts
>             
>             // Split up the userid into a path, digit by digit
>             $n = strlen($PathParts[1]);
>             $DirParts = array();
>             for($i = 0; $i < $n; $i++) {
>                $DirParts[] = $PathParts[1]{$i};
>             }
>             $PathParts[1] = implode('/', $DirParts);
>             
>             // Rebuild full path
>             $Row[$PathColumn] = implode('/', $PathParts);
>          }
>          
>          $Path = $Row[$PathColumn];
>          
>          // Build path
>          if (!file_exists(dirname($Path))) {
>             $R = mkdir(dirname($Path), 0777, TRUE); 
>             if (!$R)
>                die("Could not create ".dirname($Path));
>          }
>          
>          if ($Thumbnail) {
>             $PicPath = str_replace('/avat', '/pavat', $Path);
>             $fp = fopen($PicPath, 'wb');
>          } else {
>             $fp = fopen($Path, 'wb');
>          }
>          if (!is_resource($fp))
>             die("Could not open $Path.");
>          
>          fwrite($fp, $Row[$BlobColumn]);
>          fclose($fp);
>          $this->Status('.');
>          
>          if ($Thumbnail) {
>             if ($Thumbnail === TRUE)
>                $Thumbnail = 50;
>             
>             $ThumbPath = str_replace('/avat', '/navat', $Path);
>             $this->GenerateThumbnail($PicPath, $ThumbPath, $Thumbnail, $Thumbnail);
>          }
>          $Count++;
>       }
>       $this->Status("$Count Blobs.\n");
>       $this->Comment("$Count Blobs.", FALSE);
319,320c555,556
<    protected function _ExportTable($TableName, $Query, $Mappings = array()) {
<       $fp = $this->_File;
---
>    protected function _ExportTable($TableName, $Query, $Mappings = array(), $Options = array()) {
>       $fp = $this->File;
333a570,578
>       
>       // Check for a chunked query.
>       $Query = str_replace('{from}', -2000000000, $Query);
>       $Query = str_replace('{to}', 2000000000, $Query);
>       
>       if (strpos($Query, '{from}') !== FALSE) {
>          $this->_ExportTableDBChunked($TableName, $Query, $Mappings);
>          return;
>       }
336c581
<       if ($this->TestMode) {
---
>       if ($this->TestMode && $this->TestLimit) {
339c584
<             $Query .= ' limit 10';
---
>             $Query .= " limit {$this->TestLimit}";
345,348d589
<       // Set the search and replace to escape strings.
<       $EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
<       $EscapeReplace = array(self::ESCAPE.self::ESCAPE, self::ESCAPE.self::DELIM, self::ESCAPE.self::NEWLINE, self::ESCAPE.self::QUOTE);
< 
352,363d592Porter Plus
<       
<        /*Porter Plus*/
<        $TopLevelFilters = $this->GetTopLevelFilters($TableName);
<         /*Porter Plus*/
< 
<       // Get the filters from the mappings.
<       $Filters = array();
<       foreach ($Mappings as $Column => $Mapping) {
<          if (is_array($Mapping) &&isset($Mapping['Column']) && isset($Mapping['Filter'])) {
<             $Filters[$Mapping['Column']] = $Mapping['Filter'];
<          }
<       }
365,366c594
<       $Data = $this->Query($Query, $IDName, $LastID, $this->_Limit);
<       $Mb = function_exists('mb_detect_encoding');
---
>       $Data = $this->Query($Query);
377,379d604
<                // Start with the table name.
<                fwrite($fp, 'Table: '.$TableName.self::NEWLINE);
< 
381,388c606,608
<                $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings);
< 
<                // Build and write the table header.
<                $TableHeader = $this->_GetTableHeader($ExportStructure, $Structure);
< 
<                fwrite($fp, $TableHeader.self::NEWLINE);
< 
<                $Mappings = array_flip($Mappings);
---
>                $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings, $TableName);
>                $RevMappings = $this->FlipMappings($Mappings);
>                $this->WriteBeginTable($fp, $TableName, $ExportStructure);
391a612
>             $this->WriteRow($fp, $Row, $ExportStructure, $RevMappings);
393,459c614,668
<             $First = TRUE;
< 
<             // Loop through the columns in the export structure and grab their values from the row.
<             $ExRow = array();
<             foreach ($ExportStructure as $Field => $Type) {
<                // Get the value of the export.
<                if (array_key_exists($Field, $Row)) {
<                   // The column has an exact match in the export.
<                   $Value = $Row[$Field];
<                } elseif (array_key_exists($Field, $Mappings)) {
<                   // The column is mapped.
<                   $Value = $Row[$Mappings[$Field]];
<                } else {
<                   $Value = NULL;
<                }
< 
<                // Check to see if there is a callback filter.
<                if (isset($Filters[$Field])) {
<                   $Callback = $Filters[$Field];
<                   $Row2 =& $Row;
<                   $Value = call_user_func($Filters[$Field], $Value, $Field, $Row2, $Column);
<                   $Row = $this->CurrentRow;
<                }
< 
<                // Format the value for writing.
<                if (is_null($Value)) {
<                   $Value = self::NULL;
<                } elseif (is_numeric($Value)) {
<                   // Do nothing, formats as is.
<                } elseif (is_string($Value)) {
< 
<                   // Check to see if there is a callback filter.
<                   if (isset($Filters[$Field])) {
<                      //$Value = call_user_func($Filters[$Field], $Value, $Field, $Row);
<                   } else {
<                      if($Mb && mb_detect_encoding($Value) != 'UTF-8')
<                         $Value = utf8_encode($Value);
<                   }
< 		  /*Porter Plus*/
< 		  if (isset($TopLevelFilters[$Field])) {
< 			$Callback = $TopLevelFilters[$Field];
< 			$Row2 =& $Row;
< 			$Value = call_user_func($Callback, $Value, $Field, $Row2, $Column);
< 			$Row = $this->CurrentRow;
< 		   }
< 		  if($this->GetOption('utf8force') && ($ExportStructure[$Value]=='text' || stripos($ExportStructure[$Value],'varchar')!==FALSE)){
< 			$Value = utf8_encode($Value);
< 		  }
< 		  /*Porter Plus*/
< 
<                   $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
<                   $Value = self::QUOTE
<                      .str_replace($EscapeSearch, $EscapeReplace, $Value)
<                      .self::QUOTE;
<                } elseif (is_bool($Value)) {
<                   $Value = $Value ? 1 : 0;
<                } else {
<                   // Unknown format.
<                   $Value = self::NULL;
<                }
< 
<                $ExRow[] = $Value;
<             }
<             // Write the data.
<             fwrite($fp, implode(self::DELIM, $ExRow));
<             // End the record.
<             fwrite($fp, self::NEWLINE);
---
> //            // Loop through the columns in the export structure and grab their values from the row.
> //            $ExRow = array();
> //            foreach ($ExportStructure as $Field => $Type) {
> //               // Get the value of the export.
> //               $Value = NULL;
> //               if (array_key_exists($Field, $Mappings)) {
> //                  if (isset($Row[$Mappings[$Field]])) {
> //                     // The column is mapped.
> //                     $Value = $Row[$Mappings[$Field]];
> //                  }
> //               } elseif (array_key_exists($Field, $Row)) {
> //                  // The column has an exact match in the export.
> //                  $Value = $Row[$Field];
> //               }
> //
> //               // Check to see if there is a callback filter.
> //               if (isset($Filters[$Field])) {
> //                  $Callback = $Filters[$Field];
> //                  $Row2 =& $Row;
> //                  $Value = call_user_func($Filters[$Field], $Value, $Field, $Row2, $Column);
> //                  $Row = $this->CurrentRow;
> //               }
> //
> //               // Format the value for writing.
> //               if (is_null($Value)) {
> //                  $Value = self::NULL;
> //               } elseif (is_numeric($Value)) {
> //                  // Do nothing, formats as is.
> //               } elseif (is_string($Value)) {
> //
> //                  // Check to see if there is a callback filter.
> //                  if (isset($Filters[$Field])) {
> //                     //$Value = call_user_func($Filters[$Field], $Value, $Field, $Row);
> //                  } else {
> //                     if($Mb && mb_detect_encoding($Value) != 'UTF-8')
> //                        $Value = utf8_encode($Value);
> //                  }
> //
> //                  $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
> //                  $Value = self::QUOTE
> //                     .str_replace($EscapeSearch, $EscapeReplace, $Value)
> //                     .self::QUOTE;
> //               } elseif (is_bool($Value)) {
> //                  $Value = $Value ? 1 : 0;
> //               } else {
> //                  // Unknown format.
> //                  $Value = self::NULL;
> //               }
> //
> //               $ExRow[] = $Value;
> //            }
> //            // Write the data.
> //            fwrite($fp, implode(self::DELIM, $ExRow));
> //            // End the record.
> //            fwrite($fp, self::NEWLINE);
466,467c675,678
<       // Write an empty line to signify the end of the table.
<       fwrite($fp, self::NEWLINE);
---
>       if (!isset($Options['NoEndline'])) {
>          $this->WriteEndTable($fp);
>       }
>       
472,477c683,687
< 
<    protected function _ExportTableDB($TableName, $Query, $Mappings = array()) {
<       $DestDb = '';
<       if (isset($this->DestDb))
<          $DestDb = $this->DestDb.'.';
< 
---
>    
>    protected function _CreateExportTable($TableName, $Query, $Mappings = array()) {
>       if (!$this->ScriptCreateTable)
>          return;
>       
494c704
<          $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings);
---
>          $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings, $TableName);
496d705
<          $Mappings = array_flip($Mappings);
500c709
< 
---
>       
506,507c715,721
<       $this->Query("drop table if exists {$DestDb}GDN_z$TableName");
<       $CreateSql = "create table {$DestDb}GDN_z$TableName (\n  ".implode(",\n  ", $ColumnDefs)."\n) engine=innodb";
---
>       $DestDb = '';
>       if (isset($this->DestDb))
>          $DestDb = $this->DestDb.'.';
>       
>       $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
>       $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  ".implode(",\n  ", $ColumnDefs)."\n) engine=innodb";
>       
508a723,758
>    }
> 
>    protected function _ExportTableDB($TableName, $Query, $Mappings = array()) {
>       if ($this->HasFilter($Mappings) || strpos($Query, 'union all') !== FALSE) {
>          $this->_ExportTableImport($TableName, $Query, $Mappings);
>          return;
>       }
>       
>       // Check for a chunked query.
>       if (strpos($Query, '{from}') !== FALSE) {
>          $this->_ExportTableDBChunked($TableName, $Query, $Mappings);
>          return;
>       }
>       
>       $DestDb = '';
>       if (isset($this->DestDb))
>          $DestDb = $this->DestDb.'.';
> 
>       // Limit the query to grab any additional columns.
>       $QueryStruct = $this->GetQueryStructure($Query, $TableName);
>       $Structure = $this->_Structures[$TableName];
>       
>       $ExportStructure = $this->GetExportStructure($QueryStruct, $Structure, $Mappings, $TableName);
> 
>       $Mappings = $this->FlipMappings($Mappings);
> 
>       // Build the create table statement.
>       $ColumnDefs = array();
>       foreach ($ExportStructure as $ColumnName => $Type) {
>          $ColumnDefs[] = "`$ColumnName` $Type";
>       }
>       if ($this->ScriptCreateTable) {
>          $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
>          $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  ".implode(",\n  ", $ColumnDefs)."\n) engine=innodb";
>          $this->Query($CreateSql);
>       }
512,513c762,763
<       if ($this->TestMode) {
<          $Query .= ' limit 10';
---
>       if ($this->TestMode && $this->TestLimit) {
>          $Query .= " limit {$this->TestLimit}";
514a765,768
>       
> //      echo $Query."\n\n\n";
> //      die();
> //      print_r(ParseSelect($Query));
518,520c772,773
<       foreach ($ExportStructure as $ColumnName => $Type) {
<          $InsertColumns[] = "`$ColumnName`";
<          
---
>       foreach ($ExportStructure as $ColumnName => $Type) {         
>          $InsertColumns[] = '`'.$ColumnName.'`';
522c775
<             $SelectColumns[] = "`{$Mappings[$ColumnName]}`";
---
>             $SelectColumns[$ColumnName] = $Mappings[$ColumnName];
524c777
<             $SelectColumns[] = "`{$ColumnName}`";
---
>             $SelectColumns[$ColumnName] = $ColumnName;
526a780,782
> //      print_r($SelectColumns);
>       
>       $Query = ReplaceSelect($Query, $SelectColumns);
528c784
<       $InsertSql = "insert {$DestDb}GDN_z$TableName"
---
>       $InsertSql = "replace {$DestDb}{$this->DestPrefix}$TableName"
530,531c786,788
<          ."select \n  ".implode(",\n  ", $SelectColumns)."\n"
<          ."from (\n  ".str_replace("\n", "\n  ", $Query)."\n) q";
---
>          .$Query;
>       
> //      die($InsertSql);
534a792,818
>    protected function _ExportTableDBChunked($TableName, $Query, $Mappings = array()) {
>       // Grab the table name from the first from.
>       if (preg_match('`\sfrom\s([^\s]+)`', $Query, $Matches)) {
>          $From = $Matches[1];
>       } else {
>          trigger_error("Could not figure out table for $TableName chunking.", E_USER_WARNING);
>          return;
>       }
>       
>       $Sql = "show table status like '{$From}';";
>       $R = $this->Query($Sql, TRUE);
>       $Row = mysql_fetch_assoc($R);
>       mysql_free_result($R);
>       $Max = $Row['Auto_increment'];
>       
>       if (!$Max)
>          $Max = 2000000;
>       
>       for ($i = 0; $i < $Max; $i += $this->ChunkSize) {
>          $From = $i;
>          $To = $From + $this->ChunkSize - 1;
>          
>          $Sql = str_replace(array('{from}', '{to}'), array($From, $To), $Query);
>          $this->_ExportTableDB($TableName, $Sql, $Mappings);
>       }
>    }
>    
544a829,842
>    public function FlipMappings($Mappings) {
>       $Result = array();
>       foreach ($Mappings as $Column => $Mapping) {
>          if (is_string($Mapping))
>             $Result[$Mapping] = array('Column' => $Column);
>          else {
>             $Col = $Mapping['Column'];
>             $Mapping['Column'] = $Column;
>             $Result[$Col] = $Mapping;
>          }
>       }
>       return $Result;
>    }
>    
566,568d863
<       static $EscapeSearch = NULL; if ($EscapeSearch === NULL) $EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
<       static $EscapeReplace = NULL; if ($EscapeReplace === NULL) $EscapeReplace = array(self::ESCAPE.self::ESCAPE, self::ESCAPE.self::DELIM, self::ESCAPE.self::NEWLINE, self::ESCAPE.self::QUOTE);
< 
575c870
<          if($Mb && mb_detect_encoding($Value) != 'UTF-8')
---
>          if(self::$Mb && mb_detect_encoding($Value) != 'UTF-8')
580c875
<             .str_replace($EscapeSearch, $EscapeReplace, $Value)
---
>             .str_replace(self::$EscapeSearch, self::$EscapeReplace, $Value)
589a885,964
>    
>    public function GenerateThumbnail($Path, $ThumbPath, $Height = 50, $Width = 50) {
>       list($WidthSource, $HeightSource, $Type) = getimagesize($Path);
>       
>       $XCoord = 0;
>       $YCoord = 0;
>       $HeightDiff = $HeightSource - $Height;
>       $WidthDiff = $WidthSource - $Width;
>       if ($WidthDiff > $HeightDiff) {
>          // Crop the original width down
>          $NewWidthSource = round(($Width * $HeightSource) / $Height);
> 
>          // And set the original x position to the cropped start point.
>          $XCoord = round(($WidthSource - $NewWidthSource) / 2);
>          $WidthSource = $NewWidthSource;
>       } else {
>          // Crop the original height down
>          $NewHeightSource = round(($Height * $WidthSource) / $Width);
> 
>          // And set the original y position to the cropped start point.
>          $YCoord = round(($HeightSource - $NewHeightSource) / 2);
>          $HeightSource = $NewHeightSource;
>       }
> 
>       try {
>          switch ($Type) {
>                case 1:
>                   $SourceImage = imagecreatefromgif($Path);
>                break;
>             case 2:
>                   $SourceImage = imagecreatefromjpeg($Path);
>                break;
>             case 3:
>                $SourceImage = imagecreatefrompng($Path);
>                imagealphablending($SourceImage, TRUE);
>                break;
>          }
> 
>          $TargetImage = imagecreatetruecolor($Width, $Height);
>          imagecopyresampled($TargetImage, $SourceImage, 0, 0, $XCoord, $YCoord, $Width, $Height, $WidthSource, $HeightSource);
>          imagedestroy($SourceImage);
> 
>          switch ($Type) {
>             case 1:
>                imagegif($TargetImage, $ThumbPath);
>                break;
>             case 2:
>                imagejpeg($TargetImage, $ThumbPath);
>                break;
>             case 3:
>                imagepng($TargetImage, $ThumbPath);
>                break;
>          }
>          imagedestroy($TargetImage);
>       }
>       catch (Exception $e) {
>          echo "Could not generate a thumnail for ".$TargetImage;
>       }
> //      die('</pre>foo');
>    }
>    
>    /**
>     * Execute an sql statement and return the result.
>     * 
>     * @param type $Sql
>     * @param type $IndexColumn
>     * @return type
>     */
>    public function Get($Sql, $IndexColumn = FALSE) {
>       $R = $this->_Query($Sql, TRUE);
>       $Result = array();
>       
>       while ($Row = mysql_fetch_assoc($R)) {
>          if ($IndexColumn)
>             $Result[$Row[$IndexColumn]] = $Row;
>          else
>             $Result[] = $Row;
>       }
>       return $Result;
>    }
604c979
<          return $False;
---
>          return FALSE;
660c1035
<    public function GetExportStructure($Row, $Structure, &$Mappings) {
---
>    public function GetExportStructure($Row, $TableOrStructure, &$Mappings, $TableName = '_') {
662c1037,1041
<       // See what columns from the structure are in
---
>       
>       if (is_string($TableOrStructure))
>          $Structure = $this->_Structures[$TableOrStructure];
>       else
>          $Structure = $TableOrStructure;
678a1058,1061
>                if (!isset($Mapping['Column'])) {
>                   trigger_error("Mapping for $Column does not have a 'Column' defined.", E_USER_ERROR);
>                }
>                
679a1063
>                
686c1070
<                $Mappings[$Column] = $DestColumn;
---
> //               $Mappings[$Column] = $DestColumn;
690a1075,1088
>             
>             // Verify column doesn't exist in Mapping array's Column element
>             $MappingExists = FALSE;
>             foreach ($Mappings as $TestMapping) {
>                if ($TestMapping == $Column)
>                   $MappingExists = TRUE;
>                elseif (is_array($TestMapping) && array_key_exists('Column', $TestMapping) && ($TestMapping['Column'] == $Column))
>                   $MappingExists = TRUE;
>             }
>             
>             // Also add the column to the mapping.
>             if (!$MappingExists) {
>                $Mappings[$Column] = $DestColumn;
>             }
705c1103,1110
<          if (!is_array($Options) || !isset($Options['Column']))
---
>          if (!is_array($Options)) {
>             // Force the mappings into the expanded array syntax for easier processing later.
>             $Mappings[$Source] = array('Column' => $Options);
>             continue;
>          }
>          
>          if (!isset($Options['Column'])) {
>             trigger_error("No column for $TableName(source).$Source.", E_USER_NOTICE);
706a1112,1113
>          }
>          
707a1115,1119
>          
>          if (!array_key_exists($Source, $Row) && !isset($Options['Type'])) {
>             trigger_error("No column for $TableName(source).$Source.", E_USER_NOTICE);
>          }
>          
715c1127,1128
<          else
---
>          else {
>             trigger_error("No column for $TableName.$DestColumn.", E_USER_NOTICE);
716a1130
>          }
723a1138,1168
>    
>    public function GetQueryStructure($Query, $Key = FALSE) {
>       $QueryStruct = rtrim($Query, ';').' limit 1';
>       if (!$Key)
>          $Key = md5($QueryStruct);
>       if (isset($this->_QueryStructures[$Key]))
>          return $this->_QueryStructures[$Key];
>       
>       $R = $this->Query($QueryStruct, TRUE);
>       $i = 0;
>       $Result = array();
>       while ($i < mysql_num_fields($R)) {
>          $Meta = mysql_fetch_field($R, $i);
>          $Result[$Meta->name] = $Meta->table;
>          $i++;
>       }
>       $this->_QueryStructures[$Key] = $Result;
>       return $Result;
>    }
>    
>    public function GetValue($Sql, $Default) {
>       $Data = $this->Get($Sql);
>       if (count($Data) > 0) {
>          $Data = array_shift($Data); // first row
>          $Result = array_shift($Data); // first column
>          
>          return $Result;
>       } else {
>          return $Default;
>       }
>    }
739a1185,1193
>    public function HasFilter(&$Mappings) {
>       foreach ($Mappings as $Column => $Info) {
>          if (is_array($Info) && isset($Info['Filter'])) {
>             return TRUE;
>          }
>       }
>       return FALSE;
>    }
>    
744c1198,1227
<       return html_entity_decode($Value, ENT_COMPAT, 'UTF-8');
---
>       return html_entity_decode($Value, ENT_QUOTES, 'UTF-8');
>    }
>    
>    public function HTMLDecoderDb($TableName, $ColumnName, $PK) {
>       $Common = array('&amp;' => '&', '&lt;' => '<', '&gt;' => '>', '&apos;' => "'", '&quot;' => '"', '&#39;' => "'");
>       foreach ($Common as $From => $To) {
>          $FromQ = mysql_escape_string($From);
>          $ToQ = mysql_escape_string($To);
>          $Sql = "update :_{$TableName} set $ColumnName = replace($ColumnName, '$FromQ', '$ToQ') where $ColumnName like '%$FromQ%'";
>          
>          $this->Query($Sql);
>       }
>       
>       // Now decode the remaining rows.
>       $Sql = "select * from :_$TableName where $ColumnName like '%&%;%'";
>       $Result = $this->Query($Sql, TRUE);
>       while ($Row = mysql_fetch_assoc($Result)) {
>          $From = $Row[$ColumnName];
>          $To = $this->HTMLDecoder($From);
>          
>          if ($From != $To) {
>             $ToQ = mysql_escape_string($To);
>             $Sql = "update :_{$TableName} set $ColumnName = '$ToQ' where $PK = {$Row[$PK]}";
>             $this->Query($Sql, TRUE);
>          }
>       }
>    }
>    
>    public function NotFilter($Value) {
>       return (int)(!$Value);
759,777c1242,1260
<       if($this->UseStreaming) {
<          /** Setup the output to stream the file. */
< 
<          // required for IE, otherwise Content-Disposition may be ignored
<          if(ini_get('zlib.output_compression'))
<             ini_set('zlib.output_compression', 'Off');
< 
<          @ob_end_clean();
< 
<          
<          $fp = fopen('php://output', 'ab');
<          header("Content-Disposition: attachment; filename=\"{$this->Path}\"");
<          header('Content-Type: text/plain');
<          header("Content-Transfer-Encoding: binary");
<          header('Accept-Ranges: bytes');
<          header("Cache-control: private");
<          header('Pragma: private');
<          header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
<       } else {
---
> //      if($this->UseStreaming) {
> //         /** Setup the output to stream the file. */
> //
> //         // required for IE, otherwise Content-Disposition may be ignored
> //         if(ini_get('zlib.output_compression'))
> //            ini_set('zlib.output_compression', 'Off');
> //
> //         @ob_end_clean();
> //
> //         
> //         $fp = fopen('php://output', 'ab');
> //         header("Content-Disposition: attachment; filename=\"{$this->Path}\"");
> //         header('Content-Type: text/plain');
> //         header("Content-Transfer-Encoding: binary");
> //         header('Accept-Ranges: bytes');
> //         header("Cache-control: private");
> //         header('Pragma: private');
> //         header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
> //      } else {
783,784c1266,1267
<       }
<       $this->_File = $fp;
---
> //      }
>       $this->File = $fp;
793a1277,1288
>       if (!preg_match('`limit 1;$`', $Query))
>          $this->Queries[] = $Query;
>          
>       if ($this->Destination == 'database' && $this->CaptureOnly) {
>          if (!preg_match('`^\s*select|show|describe|create`', $Query))
>             return 'SKIPPED';
>       }
> 
>       return $this->_Query($Query, $Buffer);
>    }
>    
>    protected function _Query($Sql, $Buffer = FALSE) {
796,800c1291,1298
<       $Query = str_replace(':_', $this->Prefix, $Query); // replace prefix.
<       $Query = rtrim($Query, ';').';';
<       $this->Queries[] = $Query;
< 
<       $Connection = mysql_connect($this->_Host, $this->_Username, $this->_Password);
---
>       $Sql = str_replace(':_', $this->Prefix, $Sql); // replace prefix.
>       if ($this->SourcePrefix) {
>          $Sql = preg_replace("`\b{$this->SourcePrefix}`", $this->Prefix, $Sql); // replace prefix.
>       }
>       
>       $Sql = rtrim($Sql, ';').';';
>       
>       $Connection = @mysql_connect($this->_Host, $this->_Username, $this->_Password);
802a1301
>       
804c1303
<          $Result = mysql_query($Query, $Connection);
---
>          $Result = mysql_query($Sql, $Connection);
806c1305
<          $Result = mysql_unbuffered_query($Query, $Connection);
---
>          $Result = mysql_unbuffered_query($Sql, $Connection);
811a1311,1314
>          echo '<pre>', 
>             htmlspecialchars($Sql), 
>             htmlspecialchars(mysql_error($Connection)),
>             '</pre>';
817a1321,1331
>    public function QueryN($SqlList) {
>       if (!is_array($SqlList))
>          $SqlList = explode(';', $SqlList);
>       
>       foreach ($SqlList as $Sql) {
>          $Sql = trim($Sql);
>          if ($Sql)
>             $this->Query($Sql);
>       }
>    }
>    
823a1338,1342
>    
>    public function Status($Msg) {
>       if (defined('CONSOLE'))
>          echo $Msg;
>    }
833a1353,1363
>    
>    public function TimestampToDate($Value) {
>       if ($Value == NULL)
>          return NULL;
>       else
>          return gmdate('Y-m-d H:i:s', $Value);
>    }
>    
>    public function TimestampToDateDb($Value) {
>       
>    }
843,844c1373
< 
<       return $this->_UseCompression && !$this->UseStreaming && function_exists('gzopen');
---
>       return $this->_UseCompression && $this->Destination == 'file' && !$this->UseStreaming && function_exists('gzopen');
867,870c1396,1427
<       $Desc = $this->Query('describe :_'.$Table);
<       if ($Desc === false)
<          return false;
< 
---
>       static $_Exists = array();
>       
>       if (!isset($_Exists[$Table])) {
>          $Result = $this->Query("show table status like ':_$Table'", TRUE);
>          if (!$Result) {
>             $_Exists[$Table] = FALSE;
>          } elseif (!mysql_fetch_assoc($Result)) {
>             $_Exists[$Table] = FALSE;
>          } else {
>             mysql_free_result($Result);
>             $Desc = $this->Query('describe :_'.$Table);
>             if ($Desc === false) {
>                $_Exists[$Table] = FALSE;
>             } else {
>                if (is_string($Desc))
>                   die($Desc);
>                
>                $Cols = array();
>                while (($TD = mysql_fetch_assoc($Desc)) !== false) {
>                   $Cols[$TD['Field']] = $TD;
>                }
>                mysql_free_result($Desc);
>                $_Exists[$Table] = $Cols;
>             }
>          }
>       }
>       
>       if ($_Exists[$Table] == FALSE)
>          return FALSE;
>       
>       $Columns = (array)$Columns;
>       
874d1430
<       $Cols = array();
876,878c1432
<       while (($TD = mysql_fetch_assoc($Desc)) !== false) {
<          $Cols[] = $TD['Field'];
<       }
---
>       $Cols = array_keys($_Exists[$Table]);
883d1436
<       mysql_free_result($Desc);
951c1504
<    public function WriteBeginTable($fp, $TableName, $Columns) {
---
>    public function WriteBeginTable($fp, $TableName, $ExportStructure) {
954c1507
<       foreach($Columns as $Key => $Value) {
---
>       foreach($ExportStructure as $Key => $Value) {
973a1527,1534
>    }
>    
>    public function WriteEndTable($fp) {
>       fwrite($fp, self::NEWLINE);
>    }
>    
>    public function WriteRow($fp, $Row, $ExportStructure, $RevMappings) {
>       $this->CurrentRow =& $Row;
974a1536,1595
>       // Loop through the columns in the export structure and grab their values from the row.
>       $ExRow = array();
>       foreach ($ExportStructure as $Field => $Type) {
>          // Get the value of the export.
>          $Value = NULL;
>          if (isset($RevMappings[$Field]) && isset($Row[$RevMappings[$Field]['Column']])) {
>             // The column is mapped.
>             $Value = $Row[$RevMappings[$Field]['Column']];
>          } elseif (array_key_exists($Field, $Row)) {
>             // The column has an exact match in the export.
>             $Value = $Row[$Field];
>          }
> 
>          // Check to see if there is a callback filter.
>          $Filtered = FALSE;
>          if (isset($RevMappings[$Field]['Filter'])) {
>             $Callback = $RevMappings[$Field]['Filter'];
>             
>             $Row2 =& $Row;
>             $Value = call_user_func($Callback, $Value, $Field, $Row2, $Field);
>             $Row = $this->CurrentRow;
>             $Filtered = TRUE;
>          }
> 
>          // Format the value for writing.
>          if (is_null($Value)) {
>             $Value = self::NULL;
>          } elseif (is_integer($Value)) {
>             // Do nothing, formats as is.
>             // Only allow ints because PHP allows weird shit as numeric like "\n\n.1"
>          } elseif (is_string($Value) || is_numeric($Value)) {
>             // Check to see if there is a callback filter.
>             if (!isset($RevMappings[$Field])) {
>                //$Value = call_user_func($Filters[$Field], $Value, $Field, $Row);
>             } else {
>                if(self::$Mb && mb_detect_encoding($Value) != 'UTF-8')
>                   $Value = utf8_encode($Value);
>             }
> 
>             $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
>             $Value = self::QUOTE
>                .str_replace(self::$EscapeSearch, self::$EscapeReplace, $Value)
>                .self::QUOTE;
>          } elseif (is_bool($Value)) {
>             $Value = $Value ? 1 : 0;
>          } else {
>             // Unknown format.
>             $Value = self::NULL;
>          }
> 
>          $ExRow[] = $Value;
>       }
>       // Write the data.
>       fwrite($fp, implode(self::DELIM, $ExRow));
>       // End the record.
>       fwrite($fp, self::NEWLINE);
>    }
>    
>    public static function FileExtension($ColumnName) {
>       return "right($ColumnName, instr(reverse($ColumnName), '.'))";
976,1034c1597,1604
<    /*Porter Plus*/
< 	public function ParseOperations($Value, $Field, $Row){
< 		$SearchReplExtra = $this->GetOption('searchreplace') ? $this->GetOption('searchreplace')  : array();
< 		$SearchRepl=array();
< 		foreach($this->Options() As $Option){
< 			
< 			if($Option  =='bbcode2html'){
< 				if($Field=='Format' && $Value=='BBCode')  $Value = 'Html';
< 				if($Field=='Body' && $Row['Format']=='BBCode')  $Value = BBcode::Parse($Value);
< 			}
< 		
< 			if($Option == 'phpBBfixes'){
< 				$SearchRepl['&#58;']=array("repl"=>':',"regexp"=>FALSE);
< 				$SearchRepl['&#46;']=array("repl"=>'.',"regexp"=>FALSE);
< 				$SearchRepl['&quot;']=array("repl"=>'"',"regexp"=>FALSE);
< 				$SearchRepl['&lt;[\-]+']=array("repl"=>'',"regexp"=>TRUE);
< 				$SearchRepl['<!--\s+s([^\s]+)\s+-->\s*<img[^>]+>\s*<!--\s+s[^\s]+\s+-->'] =array("repl"=>'\\1',"regexp"=>TRUE);
< 				$SearchRepl['&lt;!--\s+s([^\s]+)\s+--&gt;\s*&lt;img[^&]+&gt;\s*&lt;!--\s+s[^\s]+\s+--&gt;'] =array("repl"=>'\\1',"regexp"=>TRUE);
< 				$SearchRepl['/?viewtopic\.php([a-z\d=&\?]*?)([&\?](p|post)=(\d+))([a-z\d=&\?]*)'] =array("repl"=>'/discussion/comment/\\4/', "regexp"=>TRUE);
< 				$SearchRepl['/?viewtopic\.php([a-z\d=&\?]*?)([&\?](t|topic)=(\d+))([a-z\d=&\?]*)'] =array("repl"=>'/discussion/\\4/x/p1/', "regexp"=>TRUE);
< 				$SearchRepl['/?viewforum\.php([a-z\d=&\?]*?)([&\?](f|forum)=(\d+))([a-z\d=&\?]*)'] =array("repl"=>'/categories/\\4/', "regexp"=>TRUE);
< 			}
< 			
< 			if($Option == 'replsearch'){
< 				reset($SearchReplExtra);
< 				list($key, $val) = each($SearchReplExtra);
< 				$SearchRepl[$key] =$val;
< 				array_shift($SearchReplExtra);
< 			}
< 		}
< 		
< 		if(in_array($Field,array('Body','Name'))){
< 			foreach($SearchRepl As $SReplI => $SReplV){
< 				if($SReplV["regexp"]){
< 					$Value = preg_replace('`'.$SReplI.'`i',$SReplV['repl'],$Value);
< 				}else{
< 					$Value = str_ireplace($SReplI,$SReplV['repl'],$Value);
< 				}
< 			}		
< 		}
< 		
< 		return $Value;
< 	}
<    
<    public function SetOptions($Options){
< 	$this->_Options=$Options;
<    }
<    
<    public function GetOption($Option){
< 	return $this->_Options[$Option];
<    }
<    
<    public function Options(){
< 	   return $this->_Options;
<    }
<    
<    public function SetTopLevelFilters($Filters){
< 	
< 	$this->_TopLevelFilters=$Filters;
---
>    
>    public function ForceIP4($ip) {
>       if (preg_match('`(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})`', $ip, $m))
>          $ip = $m[1];
>       else
>          $ip = null;
>       
>       return $ip;
1037,1038c1607,1608
<    public function GetTopLevelFilters($TableName){
< 	return $this->_TopLevelFilters[$TableName];
---
>    public function UrlDecode($Value) {
>       return urldecode($Value);
1040d1609
<    /*Porter Plus*/
1042c1611,1628
< ?>
---
> 
>  function TimestampToDate($Value) {
>    if ($Value == NULL)
>       return NULL;
>    else
>       return gmdate('Y-m-d H:i:s', $Value);
> }
> 
> function HTMLDecoder($Value) {
>    return html_entity_decode($Value, ENT_QUOTES, 'UTF-8');
> }
> 
> function long2ipf($Value) {
>    if (!$Value)
>       return NULL;
>    return long2ip($Value);
> }
> ?>
\ No newline at end of file
Only in ./: class.ipb.php
Only in ./: class.kunena.php
Only in ./: class.mbox.php
diff /home/zero/porterplus/class.phpbb2.php ./class.phpbb2.php
8a9,10
>  
>  $Supported['phpbb2'] = array('name'=>'phpBB 2.*', 'prefix' => 'phpbb_');
29a32,38
>       // Get the characterset for the comments.
>       $CharacterSet = $Ex->GetCharacterSet('posts_text');
>       if ($CharacterSet)
>          $Ex->CharacterSet = $CharacterSet;
>       
>       $Ex->SourcePrefix = 'phpbb_';
>       
diff /home/zero/porterplus/class.phpbb3.php ./class.phpbb3.php
9a10,11
> $Supported['phpbb3'] = array('name'=>'phpBB 3.*', 'prefix' => 'phpbb_');
> 
27a30,39
>       $this->Ex = $Ex;
> 
>       // Get the characterset for the comments.
>       $CharacterSet = $Ex->GetCharacterSet('posts');
>       if ($CharacterSet)
>          $Ex->CharacterSet = $CharacterSet;
>       
>       $Ex->SourcePrefix = 'phpbb_';
>       
>       
30,31c42,48
< 
<       // Users
---
>       
>       // Users.
>       
>       // Grab the avatar salt.
>       $Px = $Ex->GetValue("select config_value from phpbb_config where config_name = 'avatar_salt'", '');
>       $cdn = $this->Param('cdn', '');
>       
33,38c50,58
<          'user_id'=>'UserID',
<          'username'=>'Name',
<          'user_password'=>'Password',
<          'user_email'=>'Email',
<          'user_timezone'=>'HourOffset',
<          'user_posts'=>array('Column' => 'CountComments', 'Type' => 'int')
---
>          'user_id' => 'UserID',
>          'username' => array('Column'=>'Name','Filter'=>array($Ex, 'HTMLDecoder')),
>          'user_password' => 'Password',
>          'user_email' => 'Email',
>          'user_timezone' => 'HourOffset',
>          'user_posts' => array('Column' => 'CountComments', 'Type' => 'int'),
>          'photo' => 'Photo',
>          'user_rank' => 'RankID',
>          'user_ip' => 'LastIPAddress'
40a61,63
>             case user_avatar_type 
>                when 1 then concat('$cdn', 'phpbb/', '$Px', '_', user_id, substr(user_avatar from locate('.', user_avatar)))
>                else null end as photo,
43,45c66,70
<             FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted
<          from :_users", $User_Map);  // ":_" will be replace by database prefix
< 
---
>             FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted,
>             ban_userid is not null as Banned
>          from :_users
>             left join phpbb_banlist bl ON (ban_userid = user_id)
>          ", $User_Map);  // ":_" will be replace by database prefix
54c79,121
< 
---
>       
>       $this->ExportUserNotes();
>       
>       // Ranks.
>       $Rank_Map = array(
>          'rank_id' => 'RankID',
>          'level' => array('Column' => 'Level', 'Filter' => function($Value) {
>             static $Level = 0;
>             $Level++;
>             
>             return $Level;
>          }),
>          'rank_title' => 'Name',
>          'title2' => 'Label',
>          'rank_min' => array('Column' => 'Attributes', 'Filter' => function($Value, $Field, $Row) {
>             $Result = array();
>             
>             if ($Row['rank_min']) {
>                $Result['Criteria']['CountPosts'] = $Row['rank_min'];
>             }
>             
>             if ($Row['rank_special']) {
>                $Result['Criteria']['Manual'] = TRUE;
>             }
>             
>             return serialize($Result);
>          })
>       );
>       $Ex->ExportTable('Rank', "
>          select r.*, r.rank_title as title2, 0 as level
>          from phpbb_ranks r
>          order by rank_special, rank_min;", $Rank_Map);
>       
>       // Permissions.
>       $Ex->ExportTable('Permission', "select
>          group_id as RoleID,
>          case
>             when group_name like '%Guest%' or group_name like 'BOTS' then 'View'
>             when group_name like '%Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
>             when group_name like '%Admin%' then 'All'
>             else 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
>          end as _Permissions
>          from phpbb_groups");
63a131,149
>       
>       
>       // Signatutes.
>       $UserMeta_Map = array(
>          'user_id' => 'UserID',
>          'name' => 'Name',
>          'user_sig' => array('Column' => 'Value', 'Filter'=>array($this, 'RemoveBBCodeUIDs')));
>       $Ex->ExportTable('UserMeta', "
>          select user_id, 'Plugin.Signatures.Sig' as name, user_sig, user_sig_bbcode_uid as bbcode_uid
>          from phpbb_users
>          where length(user_sig) > 1
> 
>          union
> 
>          select user_id, 'Plugin.Signatures.Format', 'BBCode', null
>          from phpbb_users
>          where length(user_sig) > 1
>          ", $UserMeta_Map);
>       
68c154
<          'forum_name'=>'Name',
---
>          'forum_name' => array('Column'=>'Name','Filter'=>array($Ex, 'HTMLDecoder')),
84c170,171
<          'topic_first_post_id'=>array('Column'=>'FirstCommentID','Type'=>'int')
---
>          'topic_first_post_id'=>array('Column'=>'FirstCommentID','Type'=>'int'),
>          'type' => 'Type'
90a178
>             case when t.poll_start > 0 then 'poll' else null end as type,
102a191
>          'poster_ip' => array('Column' => 'InsertIPAddress', 'Filter' => array($Ex, 'ForceIP4')),
208a298,342
>       
>       // Polls.
>       $Poll_Map = array(
>          'poll_id' => 'PollID',
>          'poll_title' => 'Name',
>          'topic_id' => 'DiscussionID',
>          'topic_time' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
>          'topic_poster' => 'InsertUserID',
>          'anonymous' => 'Anonymous');
>       $Ex->ExportTable('Poll', "
>          select distinct
>             t.*,
>             t.topic_id as poll_id,
>             1 as anonymous
>          from phpbb_poll_options po
>          join phpbb_topics t
>             on po.topic_id = t.topic_id", $Poll_Map);
>       
>       $PollOption_Map = array(
>          'id' => 'PollOptionID',
>          'poll_option_id' => 'Sort',
>          'topic_id' => 'PollID',
>          'poll_option_text' => 'Body',
>          'format' => 'Format',
>          'poll_option_total' => 'CountVotes',
>          'topic_time' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
>          'topic_poster' => 'InsertUserID'
>          );
>       $Ex->ExportTable('PollOption', "
>          select
>             po.*,
>             po.poll_option_id * 1000000 + po.topic_id as id,
>             'Html' as format,
>             t.topic_time,
>             t.topic_poster
>          from phpbb_poll_options po
>          join phpbb_topics t
>             on po.topic_id = t.topic_id", $PollOption_Map);
>       
>       $PollVote_Map = array(
>          'vote_user_id' => 'UserID',
>          'id' => 'PollOptionID');
>       $Ex->ExportTable('PollVote', "
>          select v.*, v.poll_option_id * 1000000 + v.topic_id as id
>          from phpbb_poll_votes v", $PollVote_Map);
260a395
>       $cdn = $this->Param('cdn', '');
272c407
<   concat ('FileUpload/', a.physical_filename) as Path,
---
>   concat ('$cdn','FileUpload/', a.physical_filename) as Path,
279a415,416
>       $this->ExportBanList();
> 
282a420,483
>    
>    protected function ExportUserNotes() {
>       $Ex = $this->Ex;
>       
>       // User notes.
>       $UserNote_Map = array(
>          'log_id' => array('Column' => 'UserNoteID', 'Type' => 'int'),
>          'user_id' => array('Column' => 'InsertUserID', 'Type' => 'int'),
>          'reportee_id' => array('Column' => 'UserID', 'Type' => 'int'),
>          'log_ip' => array('Column' => 'InsertIPAddress', 'Type' => 'varchar(15)'),
>          'log_time' => array('Column' => 'DateInserted', 'Type' => 'datetime', 'Filter' => array($Ex, 'TimestampToDate')),
>          'log_operation' => array('Column' => 'Type', 'Type' => 'varchar(10)', 'Filter' => function($value) {
>             switch (strtoupper($value)) {
>                case 'LOG_USER_WARNING_BODY':
>                   return 'warning';
>                default:
>                   return 'note';
>             }
>          }),
>          'format' => array('Column' => 'Format', 'Type' => 'varchar(20)'),
>          'log_data' => array('Column' => 'Body', 'Type' => 'text', 'Filter' => function($value) {
>             $value = @unserialize($value);
>             return array_pop($value);
>          })
>       );
>       $Ex->ExportTable('UserNote',
>          "select l.*, 'Text' as format
>          from :_log l
>          where reportee_id > 0
>             and log_operation in ('LOG_USER_GENERAL', 'LOG_USER_WARNING_BODY')", $UserNote_Map);
>    }
> 
>     /**
>      * Export email and ip ban list.
>      */
>     public function ExportBanList() {
>       $Ex = $this->Ex;
>       $Ex->ExportTable('Ban',
>          "select bl.*, ban_id as BanID, if (ban_ip='', 'Email', 'IpAddress') as BanType,
>              if(ban_ip='', ban_email, ban_ip) as BanValue,
>              Concat('Imported ban. ', ban_give_reason) as Notes,
>              NOW() as DateInserted
>          from :_banlist bl
>          where bl.ban_userid = 0 and (ban_ip!='' or ban_email!='')");
>     }
> 
>    public function RemoveBBCodeUIDs($r, $Field = '', $Row = '') {
>       if (!$r)
>          return $r;
>       
>       $UID = trim($Row['bbcode_uid']);
> //      $UID = '2zp03s9s';
>       if ($UID)
>          $r =  preg_replace("`((?::[a-zA-Z])?:$UID)`", '', $r);
> 
>       // Remove smilies.
>       $r = preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#', '\1', $r);
>       // Remove links.
>       $regex = '`<!-- [a-z] --><a\s+class="[^"]+"\s+href="([^"]+)">([^<]+)</a><!-- [a-z] -->`';
>       $r = preg_replace($regex, '[url=$1]$2[/url]', $r);
> 
>       // Allow mailto: links w/o a class.
>       $regex = '`<!-- [a-z] --><a\s+href="mailto:([^"]+)">([^<]+)</a><!-- [a-z] -->`i';
>       $r = preg_replace($regex, '[url=$1]$2[/url]', $r);
284,286c485,486
<    public function RemoveBBCodeUIDs($Value, $Field, $Row) {
<       $UID = $Row['bbcode_uid'];
<       return str_replace(':'.$UID, '', $Value);
---
>       $r = str_replace(array('&quot;', '&#39;', '&#58;', 'Â', '&#46;', '&amp;'), array('"', "'", ':', '', '.', '&'), $r);
>       return $r;
diff /home/zero/porterplus/class.punbb.php ./class.punbb.php
9a10,11
> $Supported['punbb'] = array('name'=>'PunBB 1.*', 'prefix' => 'punbb_');
> 
109c111
<       from punbb_forums f
---
>       from :_forums f
118c120
<       from punbb_categories", $Category_Map);
---
>       from :_categories", $Category_Map);
141,142c143,144
<       from punbb_topics t
<       left join punbb_posts p
---
>       from :_topics t
>       left join :_posts p
144c146
<       left join punbb_users eu
---
>       left join :_users eu
161,162c163,164
<       from punbb_topics t
<       join punbb_posts p
---
>       from :_topics t
>       join :_posts p
164c166
<       left join punbb_users eu
---
>       left join :_users eu
diff /home/zero/porterplus/class.simplepress.php ./class.simplepress.php
8a9,10
>  
> $Supported['SimplePress'] = array('name'=>'SimplePress 1.*', 'prefix' => 'wp_');
25a28,34
>       $Ex->SourcePrefix = 'wp_';
>       
>       // Get the characterset for the comments.
>       $CharacterSet = $Ex->GetCharacterSet('posts');
>       if ($CharacterSet)
>          $Ex->CharacterSet = $CharacterSet;
>       
31,35c40,45
<          'user_id'=>'UserID',
<          'display_name'=>'Name',
<          'user_pass'=>'Password',
<          'user_email'=>'Email',
<          'user_registered'=>'DateInserted'
---
>          'user_id' => 'UserID',
>          'display_name' => 'Name',
>          'user_pass' => 'Password',
>          'user_email' => 'Email',
>          'user_registered' => 'DateInserted',
>          'lastvisit' => 'DateLastActive'
38,41c48,51
<          "select m.*, u.user_pass, u.user_email
<           from :_users u
<           join :_sfmembers m
<             on u.ID = m.user_id", $User_Map);  // ":_" will be replace by database prefix
---
>          "select m.*, u.user_pass, u.user_email, u.user_registered
>           from wp_users u
>           join wp_sfmembers m
>             on u.ID = m.user_id;", $User_Map);
50c60,85
<          "select * from :_sfusergroups", $Role_Map);
---
>          "select
>             usergroup_id,
>             usergroup_name,
>             usergroup_desc
>          from wp_sfusergroups
> 
>          union
> 
>          select
>             100,
>             'Administrators',
>             ''", $Role_Map);
>       
>       // Permissions.
>       $Ex->ExportTable('Permission', "select
>             usergroup_id as RoleID,
> case
> 	when usergroup_name like 'Guest%' then 'View'
> 	when usergroup_name like 'Member%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
> 	when usergroup_name like 'Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
> end as _Permissions
>          from wp_sfusergroups
>          
>          union
>          
>          select 100, 'All'");
58c93,105
<          "select * from :_sfmemberships", $UserRole_Map);
---
>          "select
>             m.user_id,
>             m.usergroup_id
>          from wp_sfmemberships m
> 
>          union
> 
>          select
>             um.user_id,
>             100
>          from wp_usermeta um
>          where um.meta_key = 'wp_capabilities'
>             and um.meta_value like '%PF Manage Forums%'", $UserRole_Map);
62,65c109,114
<          'forum_id'=>'CategoryID',
<          'forum_name'=>'Name',
<          'forum_desc'=>'Description',
<          'form_slug'=>'UrlCode'
---
>          'forum_id' => 'CategoryID',
>          'forum_name' => array('Column'=>'Name','Filter'=>array($Ex, 'HTMLDecoder')),
>          'forum_desc' => 'Description',
>          'forum_seq' => 'Sort',
>          'form_slug' => 'UrlCode',
>          'parent_id' => 'ParentCategoryID'
67,69c116,135
<       $Ex->ExportTable('Category', "select *,
<          nullif(parent,0) as ParentCategoryID
<          from :_sfforums", $Category_Map);
---
>       $Ex->ExportTable('Category', "
>          select
>             f.forum_id,
>             f.forum_name,
>             f.forum_seq,
>             f.forum_desc,
>             lower(f.forum_slug) as forum_slug,
>             case when f.parent = 0 then f.group_id + 1000 else f.parent end as parent_id
>          from wp_sfforums f
> 
>          union
> 
>          select
>             1000 + g.group_id,
>             g.group_name,
>             g.group_seq,
>             g.group_desc,
>             null,
>             null
>          from wp_sfgroups g", $Category_Map);
79c145,146
<          'topic_pinned'=>'Announce'
---
>          'topic_pinned'=>'Announce',
>          'topic_slug' => array('Column' => 'Slug', 'Type' => 'varchar(200)')
83a151,165
>       
>       if ($Ex->Exists('sftags')) {
>          // Tags
>          $Tag_Map = array(
>             'tag_id' => 'TagID',
>             'tag_name' => 'Name');
>          $Ex->ExportTable('Tag', "select * from :_sftags", $Tag_Map);
>          
>          if ($Ex->Exists('sftagmeta')) {
>             $TagDiscussion_Map = array(
>                'tag_id' => 'TagID',
>                'topic_id' => 'DiscussionID');
>             $Ex->ExportTable('TagDiscussion', "select * from :_sftagmeta", $TagDiscussion_Map);
>          }
>       }
92c174,175
<          'post_date' => 'DateInserted'
---
>          'post_date' => 'DateInserted',
>          'poster_ip' => 'InsertIPAddress'
Only in ./: class.skeleton.php
Only in ./: class.smf2.php
diff /home/zero/porterplus/class.smf.php ./class.smf.php
10a11,12
>  
> $Supported['SMF'] = array('name'=>'SMF (Simple Machines) 1.*', 'prefix' => 'smf_');
42c44
<          'avatar'=>'Photo',
---
>          //'avatar'=>'Photo',
49c51
<          select *,
---
>          select m.*,
54,55c56,59
<             concat('sha1$', lower(memberName), '$', passwd) as `password`
<          from :_members", $User_Map);
---
>             concat('sha1$', lower(memberName), '$', passwd) as `password`,
>             if(m.avatar <> '', m.avatar, concat('attachments/', a.filename)) as Photo
>          from :_members m
>          left join :_attachments a on a.ID_MEMBER = m.ID_MEMBER ", $User_Map);
154a159,177
>        
>        // Media
>        $Media_Map = array(
>          'ID_ATTACH' => 'MediaID',
>          'ID_MSG' => 'ForeignID',
>          'size' => 'Size',
>          'height' => 'ImageHeight',
>          'width' => 'ImageWidth'
>       );
>       $Ex->ExportTable('Media', 
>       "select a.*,
>          concat('attachments/', a.filename) as Path,
>          concat('attachments/', b.filename) as ThumbPath,
>          if(t.ID_TOPIC is null, 'Comment', 'Discussion') as ForeignTable
>        from :_attachments a
>        left join :_attachments b on b.ID_ATTACH = a.ID_THUMB
>        left join :_topics t on a.ID_MSG = t.ID_FIRST_MSG
>        where a.attachmentType = 0
>          and a.ID_MSG > 0;", $Media_Map);
Only in ./: class.toast.php
Only in ./: class.uservoice.php
diff /home/zero/porterplus/class.vanilla1.php ./class.vanilla1.php
18c18
<       'Comment'=> array('CommentID', 'DiscussionID', 'AuthUserID', 'DateCreated', 'EditUserID', 'DateEdited', 'Body')
---
>       'Comment'=> array('CommentID', 'DiscussionID', 'AuthUserID', 'DateCreated', 'EditUserID', 'DateEdited', 'Body', 'Deleted')
84,85c84
<          'PERMISSION_ADD_CATEGORIES' => array('Column' => 'Vanilla.Categories.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
<          'PERMISSION_APPROVE_APPLICANTS' => array('Column' => 'Garden.Applicants.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
---
>          'PERMISSION_APPROVE_APPLICANTS' => array('Column' => 'Garden.Moderation.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
87,90c86
<          'PERMISSION_MANAGE_REGISTRATION' => array('Column' => 'Garden.Registration.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
<          'PERMISSION_CHANGE_APPLICATION_SETTINGS' => array('Column' => 'Garden.Settings.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
<          'PERMISSION_MANAGE_EXTENSIONS' => array('Column' => 'Garden.Plugins.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool')),
<          'PERMISSION_MANAGE_THEMES' => array('Column' => 'Garden.Themes.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool'))
---
>          'PERMISSION_CHANGE_APPLICATION_SETTINGS' => array('Column' => 'Garden.Settings.Manage', 'Type' => 'tinyint', 'Filter' => array($this, 'ForceBool'))
192a189
>             AND c.Deleted = '0'
Only in ./: class.vbulletin5.php
diff /home/zero/porterplus/class.vbulletin.php ./class.vbulletin.php
5,6c5,6
<  * This will migrate all vBulletin data for 3.x and 4.x forums. It even 
<  * accounts for attachments created during 2.x and moved to 3.x.
---
>  * This will migrate all vBulletin data for 3.x and 4.x forums. 
>  * It migrates all attachments from 2.x and later.
12,21c12,23
<  * MIGRATING FILES:
<  * 
<  * 1) Avatars should be moved to the filesystem prior to export if they
<  * are stored in the database. Copy all the avatar_* files from
<  * vBulletin's /customavatars folder to Vanilla's /upload/userpics.
<  * 
<  * 2) Attachments should likewise be moved to the filesystem prior to
<  * export. Copy all attachments from vBulletin's attachments folder to 
<  * Vanilla's /upload folder without changing the internal folder structure.
<  * IMPORTANT: Enable the FileUpload plugin BEFORE IMPORTING.
---
>  * To export only 1 category, add 'forumid=#' parameter to the URL.
>  * To extract avatars stored in database, add 'avatars=1' parameter to the URL.
>  * To extract attachments stored in db, add 'attachments=1' parameter to the URL.
>  * To extract all usermeta data (title, skype, custom profile fields, etc),
>  *    add 'usermeta=1' parameter to the URL.
>  * To stop the export after only extracting files, add 'noexport=1' param to the URL.
>  *
>  * TO MIGRATE FILES, BEFORE IMPORTING YOU MUST:
>  * 1) Copy entire 'customavatars' folder into Vanilla's /upload folder.
>  * 2) Copy entire 'attachments' folder into Vanilla's / upload folder.
>  * 3) Make BOTH folders writable by the server.
>  * 4) Enable the FileUpload plugin. (Media table must be present.)
28a31,39
> $Supported['vbulletin'] = array('name'=>'vBulletin 3.* and 4.*', 'prefix'=>'vb_');
> $Supported['vbulletin']['CommandLine'] = array(
>    'attachments' => array('Whether or not to export attachments.', 'Sx' => '::'),
>    'avatars' => array('Whether or not to export avatars.', 'Sx' => '::', 'Field' => 'avatars', 'Short' => 'a', 'Default' => ''),
>    'noexport' => array('Whether or not to skip the export.', 'Sx' => '::'),
>    'mindate' => array('A date to import from.'),
>    'forumid' => array('Only export 1 forum')
> );
> 
34a46,56
>    /* @var string SQL fragment to build new path to attachments. */
>    public $AttachSelect = "concat('/vbulletin/', left(f.filehash, 2), '/', f.filehash, '_', a.attachmentid,'.', f.extension) as Path";
> 
>    /* @var string SQL fragment to build new path to user photo. */
>    public $AvatarSelect = "case
>       when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
>       when av.avatarpath is not null then av.avatarpath
>       else null
>       end as customphoto";
> 
>    /* @var array Default permissions to map. */
37,57c59,80
<    'genericpermissions' => array(
<        1 => array('Garden.Profiles.View', 'Garden.Activity.View'),
<        2 => 'Garden.Profiles.Edit',
<        1024 => 'Plugins.Signatures.Edit'
<        ),
<    
<    'forumpermissions' => array(
<        1 => 'Vanilla.Discussions.View',
<        16 => 'Vanilla.Discussions.Add',
<        64 => 'Vanilla.Comments.Add',
<        4096 => 'Plugins.Attachments.Download',
<        8192 => 'Plugins.Attachments.Upload'),
<    
<    'adminpermissions' => array(
<        1 => array('Garden.Moderation.Manage', 'Vanilla.Discussions.Announce', 'Vanilla.Discussions.Close', 'Vanilla.Discussions.Delete', 'Vanilla.Comments.Delete', 'Vanilla.Comments.Edit', 'Vanilla.Discussions.Edit', 'Vanilla.Discussions.Sink', 'Garden.Activity.Delete', 'Garden.Users.Add', 'Garden.Users.Edit', 'Garden.Users.Approve', 'Garden.Users.Delete', 'Garden.Applicants.Manage'),
<        2 => array('Garden.Settings.View', 'Garden.Settings.Manage', 'Garden.Routes.Manage', 'Garden.Registration.Manage', 'Garden.Messages.Manage', 'Garden.Email.Manage', 'Vanilla.Categories.Manage', 'Vanilla.Settings.Manage', 'Vanilla.Spam.Manage', 'Garden.Plugins.Manage', 'Garden.Applications.Manage', 'Garden.Themes.Manage', 'Garden.Roles.Manage')
< //       4 => 'Garden.Settings.Manage',),
<        ),
<    
<    'wolpermissions' => array(
<        16 => 'Plugins.WhosOnline.ViewHidden')
---
>       'genericpermissions' => array(
>           1 => array('Garden.Profiles.View', 'Garden.Activity.View'),
>           2 => 'Garden.Profiles.Edit',
>           1024 => 'Plugins.Signatures.Edit'
>           ),
>       
>       'forumpermissions' => array(
>           1 => 'Vanilla.Discussions.View',
>           16 => 'Vanilla.Discussions.Add',
>           64 => 'Vanilla.Comments.Add',
>           4096 => 'Plugins.Attachments.Download',
>           8192 => 'Plugins.Attachments.Upload'
>           ),
>       
>       'adminpermissions' => array(
>           1 => array('Garden.Moderation.Manage', 'Vanilla.Discussions.Announce', 'Vanilla.Discussions.Close', 'Vanilla.Discussions.Delete', 'Vanilla.Comments.Delete', 'Vanilla.Comments.Edit', 'Vanilla.Discussions.Edit', 'Vanilla.Discussions.Sink', 'Garden.Activity.Delete', 'Garden.Users.Add', 'Garden.Users.Edit', 'Garden.Users.Approve', 'Garden.Users.Delete', 'Garden.Applicants.Manage'),
>           2 => array('Garden.Settings.View', 'Garden.Settings.Manage', 'Garden.Messages.Manage', 'Vanilla.Spam.Manage')
> //          4 => 'Garden.Settings.Manage',),
>           ),
>       
> //      'wolpermissions' => array(
> //          16 => 'Plugins.WhosOnline.ViewHidden')
62c85
<    /** @var array Required tables => columns */
---
>    /** @var array Required tables => columns. Commented values are optional. */
63a87,102
>       //'attachment'
>       //'contenttype'
>       //'customavatar'
>       'deletionlog' => array('type','primaryid'),
>       //'filedata'
>       'forum' => array('forumid','description','displayorder','title','description','displayorder'),
>       //'phrase' => array('varname','text','product','fieldname','varname'),
>       //'pm'
>       //'pmgroup'
>       //'pmreceipt'
>       //'pmtext'
>       'post' => array('postid','threadid','pagetext','userid','dateline','visible'),
>       //'setting'
>       'subscribethread' => array('userid','threadid'),
>       'thread' => array('threadid','forumid','postuserid','title','open','sticky','dateline','lastpost','visible'),
>       //'threadread'
67c106
<       'usergroup'=> array('usergroupid','title','description'),
---
>       //'userban'
69,74c108,109
<       'phrase' => array('varname','text','product','fieldname','varname'),
<       'thread' => array('threadid','forumid','postuserid','title','open','sticky','dateline','lastpost','visible'),
<       'deletionlog' => array('type','primaryid'),
<       'post' => array('postid','threadid','pagetext','userid','dateline','visible'),
<       'forum' => array('forumid','description','displayorder','title','description','displayorder'),
<       'subscribethread' => array('userid','threadid')
---
>       'usergroup'=> array('usergroupid','title','description'),
>       //'visitormessage'
82a118,129
>       // Allow limited export of 1 category via ?forumid=ID
>       $ForumID = $this->Param('forumid');
>       if ($ForumID)
>          $ForumWhere = ' and t.forumid '.(strpos($ForumID, ', ') === FALSE ? "= $ForumID" : "in ($ForumID)");
>       else
>          $ForumWhere = '';
>       
>       // Determine the character set
>       $CharacterSet = $Ex->GetCharacterSet('post');
>       if ($CharacterSet)
>          $Ex->CharacterSet = $CharacterSet;
>       
85c132,157
<   
---
>       
>       $this->ExportBlobs(
>          $this->Param('attachments'),
>          $this->Param('avatars'),
>          $ForumWhere
>       );
>       
>       if ($this->Param('noexport')) {
>          $Ex->Comment('Skipping the export.');
>          $Ex->EndExport();
>          return;
>       }
>       
>       // Check to see if there is a max date.
>       $MinDate = $this->Param('mindate');
>       if ($MinDate) {
>          $MinDate = strtotime($MinDate);
>          $Ex->Comment("Min topic date ($MinDate): ".date('c', $MinDate));
>       }
>       $Now = time();
>       
>       $cdn = $this->Param('cdn', '');
>       
>       // Grab all of the ranks.
>       $Ranks = $Ex->Get("select * from :_usertitle order by minposts desc", 'usertitleid');
>       
94,95c166,176
<          'salt'=>'char(3)',
<          'avatarrevision' => array('Column' => 'Photo', 'Filter' => array($this, 'BuildAvatar'))
---
>          'ipaddress' => 'LastIPAddress',
>          'ipaddress2' => 'InsertIPAddress',
>          'usertitle' => 'Title',
>          'posts' => array('Column' => 'RankID', 'Filter' => function($Value) use ($Ranks) {
>             // Look  up the posts in the ranks table.
>             foreach ($Ranks as $RankID => $Row) {
>                if ($Value >= $Row['minposts'])
>                   return $RankID;
>             }
>             return NULL;
>          })
97c178,186
<       $Ex->ExportTable('User', "select *,
---
>       
>       // Use file avatar or the result of our blob export?
>       if ($this->GetConfig('usefileavatar'))
>          $User_Map['filephoto'] = 'Photo';
>       else
>          $User_Map['customphoto'] = 'Photo';
>       
>       $Ex->ExportTable('User', "select u.*,
>             ipaddress as ipaddress2,
103,104c192,206
<             FROM_UNIXTIME(lastactivity) as DateUpdated
<          from :_user", $User_Map);  // ":_" will be replace by database prefix
---
>             FROM_UNIXTIME(lastactivity) as DateUpdated,
>             case when avatarrevision > 0 then concat('$cdn', 'userpics/avatar', u.userid, '_', avatarrevision, '.gif')
>                  when av.avatarpath is not null then av.avatarpath
>                  else null
>                  end as filephoto,
>             {$this->AvatarSelect},
>             case when ub.userid is not null then 1 else 0 end as Banned,
>             'vbulletin' as HashMethod
>          from :_user u
>          left join :_customavatar a
>          	on u.userid = a.userid
>          left join :_avatar av
>          	on u.avatarid = av.avatarid
>          left join :_userban ub
>        	 	on u.userid = ub.userid and ub.liftdate <= now() ", $User_Map);  // ":_" will be replace by database prefix
141c243
<           'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, SignInPermission)),
---
>           'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'SignInPermission')),
151d252
< 
153,169c254,272
<       $Ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 64 ) NOT NULL ,`Value` VARCHAR( 255 ) NOT NULL)");
<       # Standard vB user data
<       $UserFields = array('usertitle' => 'Title', 'homepage' => 'Website', 'aim' => 'AIM', 'icq' => 'ICQ', 'yahoo' => 'Yahoo', 'msn' => 'MSN', 'skype' => 'Skype', 'styleid' => 'StyleID');
<       foreach($UserFields as $Field => $InsertAs)
<          $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
<       # Dynamic vB user data (userfield)
<       $ProfileFields = $Ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
<       if (is_resource($ProfileFields)) {
<          $ProfileQueries = array();
<          while ($Field = @mysql_fetch_assoc($ProfileFields)) {
<             $Column = str_replace('_title', '', $Field['varname']);
<             $Name = preg_replace('/[^a-zA-Z0-9_-\s]/', '', $Field['text']);
<             $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
<                select userid, 'Profile.".$Name."', ".$Column." from :_userfield where ".$Column." != ''";
<          }
<          foreach ($ProfileQueries as $Query) {
<             $Ex->Query($Query);
---
>       if ($this->Param('attachments')) {
>          $Ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 255 ) NOT NULL ,`Value` text NOT NULL)");
>          # Standard vB user data
>          $UserFields = array('usertitle' => 'Title', 'homepage' => 'Website', 'skype' => 'Skype', 'styleid' => 'StyleID');
>          foreach($UserFields as $Field => $InsertAs)
>             $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
>          # Dynamic vB user data (userfield)
>          $ProfileFields = $Ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
>          if (is_resource($ProfileFields)) {
>             $ProfileQueries = array();
>             while ($Field = @mysql_fetch_assoc($ProfileFields)) {
>                $Column = str_replace('_title', '', $Field['varname']);
>                $Name = preg_replace('/[^a-zA-Z0-9_-\s]/', '', $Field['text']);
>                $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
>                   select userid, 'Profile.".$Name."', ".$Column." from :_userfield where ".$Column." != ''";
>             }
>             foreach ($ProfileQueries as $Query) {
>                $Ex->Query($Query);
>             }
172,176c275,320
<       # Get signatures
<       $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Sig', signatureparsed from :_sigparsed");
<       # Export from our tmp table and drop
<       $Ex->ExportTable('UserMeta', 'select * from VbulletinUserMeta');
<       $Ex->Query("DROP TABLE IF EXISTS VbulletinUserMeta");
---
> 
> 
>       // Signatures
>       $Sql = "
>          select
>             userid as UserID,
>             'Plugin.Signatures.Sig' as Name,
>             signature as Value
>          from :_usertextfield
>          where nullif(signature, '') is not null
> 
>          union
> 
>          select
>             userid,
>             'Plugin.Signatures.Format',
>             'BBCode'
>          from :_usertextfield
>          where nullif(signature, '') is not null";
>       $Ex->ExportTable('UserMeta', $Sql);
> 
> 
>       // Ranks
>       $Rank_Map = array(
>          'usertitleid' => 'RankID',
>          'title' => 'Name',
>          'title2' => 'Label',
>          'minposts' => array('Column' => 'Attributes', 'Filter' => function($Value) {
>             $Result = array(
>                 'Criteria' => array(
>                     'CountPosts' => $Value
>                   )
>                 );
>             
>             return serialize($Result);
>          }),
>          'level' => array('Column' => 'Level', 'Filter' => function($Value) {
>             static $Level = 1;
>             return $Level++;
>          })
>       );
>       $Ex->ExportTable('Rank', "
>          select ut.*, ut.title as title2, 0 as level
>          from :_usertitle ut
>          order by ut.minposts", $Rank_Map);
> 
186,187c330,353
<       $Ex->ExportTable('Category', "select f.*, left(title,30) as Name
<          from :_forum f", $Category_Map);
---
>       $Ex->ExportTable('Category', "select f.*, title as Name
>          from :_forum f
>          where 1 = 1 $ForumWhere", $Category_Map);
>       
>       $MinDiscussionID = FALSE;
>       $MinDiscussionWhere = FALSE;
>       if ($MinDate) {
>          $MinDiscussionID = $Ex->GetValue("
>             select max(threadid)
>             from :_thread
>             where dateline < $MinDate 
>             ", FALSE);
>          
>          $MinDiscussionID2 = $Ex->GetValue("
>             select min(threadid)
>             from :_thread
>             where dateline >= $MinDate 
>             ", FALSE); 
>          
>          // The two discussion IDs should be the same, but let's average them.
>          $MinDiscussionID = floor(($MinDiscussionID + $MinDiscussionID2) / 2);
>          
>          $Ex->Comment('Min topic id: '.$MinDiscussionID);
>       }
197c363,364
<          'views'=>'CountViews'
---
>          'views'=>'CountViews',
>          'ipaddress' => 'InsertIPAddress'
198a366,375
>       
>       if ($Ex->Destination == 'database') {
>          // Remove the filter from the title so that this doesn't take too long.
>          $Ex->HTMLDecoderDb('thread', 'title', 'threadid');
>          unset($Discussion_Map['title']['Filter']);
>       }
>       
>       if ($MinDiscussionID)
>          $MinDiscussionWhere = "and t.threadid > $MinDiscussionID";
>       
200a378
>             p.ipaddress,
205c383
<             convert(sticky,char(1)) as Announce,
---
>             if(convert(sticky,char(1))>0,2,0) as Announce,
213c391,393
<             and t.visible = 1", $Discussion_Map);
---
>             and t.visible = 1
>             $MinDiscussionWhere
>             $ForumWhere", $Discussion_Map);
220c400,401
< 			'Format' => 'Format'
---
> 			'Format' => 'Format',
>          'ipaddress' => 'InsertIPAddress'
221a403,406
>       
>       if ($MinDiscussionID)
>          $MinDiscussionWhere = "and p.threadid > $MinDiscussionID";
>       
229,230c414,417
< 				inner join :_thread t on p.threadid = t.threadid
<             left join :_deletionlog d on (d.type='post' and d.primaryid=p.postid)
---
>          inner join :_thread t 
>             on p.threadid = t.threadid
>          left join :_deletionlog d 
>             on (d.type='post' and d.primaryid=p.postid)
233c420,422
<             and p.visible = 1", $Comment_Map);
---
>             and p.visible = 1
>             $MinDiscussionWhere
>             $ForumWhere", $Comment_Map);
236,238c425,436
< 		$UserDiscussion_Map = array(
< 			'DateLastViewed' =>  'datetime');
<       $Ex->ExportTable('UserDiscussion', "select
---
>       if ($MinDiscussionID)
>          $MinDiscussionWhere = "where st.threadid > $MinDiscussionID";
>       
>       $Ex->ExportTable('UserDiscussion', "select 
>             st.userid as UserID,
>             st.threadid as DiscussionID,
>             '1' as Bookmarked,
>             FROM_UNIXTIME(tr.readtime) as DateLastViewed
>          from :_subscribethread st
>          left join :_threadread tr on tr.userid = st.userid and tr.threadid = st.threadid
>          $MinDiscussionWhere");
>       /*$Ex->ExportTable('UserDiscussion', "select
244c442
<          left join :_subscribethread st on tr.userid = st.userid and tr.threadid = st.threadid");
---
>          left join :_subscribethread st on tr.userid = st.userid and tr.threadid = st.threadid");*/
247a446,449
>          if ($MinDiscussionID)
>             $MinDiscussionWhere = "and dateline > $MinDiscussionID";
>          
>          
249,250c451,452
<             'postuserid'=>'ActivityUserID',
<             'userid'=>'RegardingUserID',
---
>             'postuserid'=>'RegardingUserID',
>             'userid'=>'ActivityUserID',
252c454,455
<             'postuserid'=>'InsertUserID'
---
>             'NotifyUserID' => 'NotifyUserID',
>             'Format' => 'Format'
255c458,465
<    			   FROM_UNIXTIME(dateline) as DateInserted
---
>                '{RegardingUserID,you} &rarr; {ActivityUserID,you}' as HeadlineFormat,
>                FROM_UNIXTIME(dateline) as DateInserted,
>                FROM_UNIXTIME(dateline) as DateUpdated,
>                INET_NTOA(ipaddress) as InsertIPAddress,
>                postuserid as InsertUserID,
>                -1 as NotifyUserID,
>                'BBCode' as Format,
>                'WallPost' as ActivityType
257c467,468
<    			where state='visible'", $Activity_Map);
---
>    			where state='visible'
>                $MinDiscussionWhere", $Activity_Map);
260c471,496
<       // Massge the pms to conversations.
---
>       $this->_ExportConversations($MinDate);
>       
>       $this->_ExportPolls();
>       
>       // Media
>       if ($Ex->Exists('attachment')) {
>          $this->ExportMedia($MinDiscussionID);
>       }
>       
>       // End
>       $Ex->EndExport();
>    }
>    
>    protected function _ExportConversations($MinDate) {
>       $Ex = $this->Ex;
>       
>       if ($MinDate) {
>          $MinID = $Ex->GetValue("
>             select max(pmtextid)
>             from :_pmtext
>             where dateline < $MinDate 
>             ", FALSE);
>       } else {
>          $MinID = FALSE;
>       }
>       $MinWhere = '';
267a504,507
>       
>       if ($MinID) {
>          $MinWhere = "where pmtextid > $MinID";
>       }
269c509
<       $Ex->Query('insert ignore z_pmto (
---
>       $Ex->Query("insert ignore z_pmto (
276c516,517
<       from :_pm;');
---
>       from :_pm
>       $MinWhere");
278c519
<       $Ex->Query('insert ignore z_pmto (
---
>       $Ex->Query("insert ignore z_pmto (
285c526,527
<       from :_pmtext;');
---
>       from :_pmtext
>       $MinWhere;");
287c529
<       $Ex->Query('insert ignore z_pmto (
---
>       $Ex->Query("insert ignore z_pmto (
296c538,539
<         on pm.pmid = r.pmid;');
---
>         on pm.pmid = r.pmid
>       $MinWhere;");
298c541
<       $Ex->Query('insert ignore z_pmto (
---
>       $Ex->Query("insert ignore z_pmto (
307c550,551
<         on pm.pmid = r.pmid;');
---
>         on pm.pmid = r.pmid
>       $MinWhere;");
344c588,589
<       from :_pmtext pm;");
---
>       from :_pmtext pm
>       $MinWhere;");
362c607
<       $Ex->Query('insert z_pmgroup (
---
>       $Ex->Query("insert z_pmgroup (
374c619
<       group by pm.title2, t2.userids;');
---
>       group by pm.title2, t2.userids;");
432a678,689
>    }
>    
>    /**
>     * Converts database blobs into files.
>     *
>     * Creates /attachments and /customavatars folders in the same directory as the export file.
>     *
>     * @param bool $Attachments Whether to move attachments.
>     * @param bool $CustomAvatars Whether to move avatars.
>     */
>    public function ExportBlobs($Attachments = TRUE, $CustomAvatars = TRUE) {
>       $Ex = $this->Ex;
434,442c691,749
<       // Media
<       if ($Ex->Exists('attachment')) {
<          $Media_Map = array(
<             'attachmentid' => 'MediaID',
<             'filename' => 'Name',
<             'extension' => array('Column' => 'Type', 'Filter' => array($this, 'BuildMimeType')),
<             'filesize' => 'Size',
<             'filehash' => array('Column' => 'Path', 'Filter' => array($this, 'BuildMediaPath')),
<             'userid' => 'InsertUserID'
---
>       if ($Attachments) {
>          $Identity = ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === TRUE) ? 'f.filedataid' : 'f.attachmentid';
>          $Sql = "select 
>                f.filedata, 
>                concat('attachments/', f.userid, '/', $Identity, '.attach') as Path
>                from ";
>          
>          // Table is dependent on vBulletin version (v4+ is filedata, v3 is attachment)
>          if ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === TRUE)
>             $Sql .= ":_filedata f";
>          else
>             $Sql .= ":_attachment f"; 
>          
>          $Ex->ExportBlobs($Sql, 'filedata', 'Path');
>       }
>       
>       if ($CustomAvatars) {
>          $Sql = "select 
>                a.filedata, 
>                case when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
>                   else null end as customphoto
>             from :_customavatar a
>             ";
>          $Sql = str_replace('u.userid', 'a.userid', $Sql);
>          $Ex->ExportBlobs($Sql, 'filedata', 'customphoto', 80);
>       }
>       
>       // Export the group icons no matter what.
>       if ($Attachments || $CustomAvatars && $Ex->Exists('socialgroupicon', 'thumbnail_filedata')) {
>          $Sql = "
>             select
>                i.filedata,
>                concat('vb/groupicons/', i.groupid, '.', i.extension) as path
>             from :_socialgroupicon i";
>          $Ex->ExportBlobs($Sql, 'filedata', 'path');
>       }
>    }
>    
>    /**
>     * Export the attachments as Media.
>     *
>     * In vBulletin 4.x, the filedata table was introduced.
>     */
>    public function ExportMedia($MinDiscussionID = FALSE) {
>       $Ex = $this->Ex;
>       
>       if ($MinDiscussionID) {
>          $DiscussionWhere = "and t.threadid > $MinDiscussionID";
>       } else {
>          $DiscussionWhere = '';
>       }
>       
>       $Media_Map = array(
>          'attachmentid' => 'MediaID',
>          'filename' => 'Name',
>          'filesize' => 'Size',
>          'userid' => 'InsertUserID',
>          'extension' => array('Column' => 'Type', 'Filter' => array($this, 'BuildMimeType')),
>          'filehash' => array('Column' => 'Path', 'Filter' => array($this, 'BuildMediaPath'))
444,447d750
<          // Test if hash field exists from 2.x
<          $SelectHash = '';
<          if ($Ex->Exists('attachment', array('hash')) === true)
<             $SelectHash = 'a.hash,';
449,450c752,771
<          // A) Do NOT grab every field to avoid potential 'filedata' blob.
<          // B) We must left join 'attachment' because we can't left join 'thread' on firstpostid (not an index).
---
>       // Add hash fields if they exist (from 2.x)
>       $AttachColumns = array('hash', 'filehash');
>       $Missing = $Ex->Exists('attachment', $AttachColumns);
>       $AttachColumnsString = '';
>       foreach ($AttachColumns as $ColumnName) {
>          if (in_array($ColumnName, $Missing)) {
>             $AttachColumnsString .= ", null as $ColumnName";
>          } else {
>             $AttachColumnsString .= ", a.$ColumnName";
>          }
>       }
>       
>       // Do the export
>       if ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === TRUE) {
>          // Exporting 4.x with 'filedata' table.
>          $Media_Map['width'] = 'ImageWidth';
>          $Media_Map['height'] = 'ImageHeight';
>          
>          // Build an index to join on.
>          $Ex->Query('create index ix_thread_firstpostid on :_thread (firstpostid)');
452c773,795
<          // First comment attachments => 'Discussion' foreign key
---
>          $Ex->ExportTable('Media', "select 
>             case when t.threadid is not null then 'discussion' when ct.class = 'Post' then 'comment' when ct.class = 'Thread' then 'discussion' else ct.class end as ForeignTable,
>             case when t.threadid is not null then t.threadid else a.contentid end as ForeignID,
>             FROM_UNIXTIME(a.dateline) as DateInserted,
>             'local' as StorageMethod,
>             a.*,
>             f.extension, f.filesize $AttachColumnsString,
>             f.width, f.height
>          from :_attachment a
>          join :_contenttype ct
>             on a.contenttypeid = ct.contenttypeid
>          join :_filedata f
>             on f.filedataid = a.filedataid
>          left join :_thread t
>             on t.firstpostid = a.contentid and a.contenttypeid = 1
>          where a.contentid > 0
>             $DiscussionWhere", $Media_Map);
>       } else {
>          // Exporting 3.x without 'filedata' table.
>          // Do NOT grab every field to avoid 'filedata' blob in 3.x.
>          // Left join 'attachment' because we can't left join 'thread' on firstpostid (not an index).
>          // Lie about the height & width to spoof FileUpload serving generic thumbnail if they aren't set.
>          $Extension = ExportModel::FileExtension('a.filename');
454c797
<             "select a.attachmentid, a.filename, a.extension, a.filesize, a.filehash, $SelectHash a.userid,
---
>             "select a.attachmentid, a.filename, $Extension as extension $AttachColumnsString, a.userid,
458c801,803
<                FROM_UNIXTIME(a.dateline) as DateInserted
---
>                FROM_UNIXTIME(a.dateline) as DateInserted,
>                '1' as ImageHeight,
>                '1' as ImageWidth
462c807
<          
---
>    
464,465c809,810
<          
<             select a.attachmentid, a.filename, a.extension, a.filesize, a.filehash, $SelectHash a.userid,
---
>    
>             select a.attachmentid, a.filename, $Extension as extension $AttachColumnsString, a.userid,
469c814,816
<                FROM_UNIXTIME(a.dateline) as DateInserted
---
>                FROM_UNIXTIME(a.dateline) as DateInserted,
>                '1' as ImageHeight,
>                '1' as ImageWidth
474a822,883
>        }
>    }
>    
>    function _ExportPolls() {
>       $Ex = $this->Ex;
>       $fp = $Ex->File;
> //      $fp = fopen('php://output', 'ab');
>       
>       $Poll_Map = array(
>          'pollid' => 'PollID',
>          'question' => 'Name',
>          'threadid' => 'DiscussionID',
>          'anonymous' => 'Anonymous',
>          'dateline' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
>          'postuserid' => 'InsertUserID'
>        );
>       $Ex->ExportTable('Poll',
>          "select 
>             p.*,
>             t.threadid,
>             t.postuserid,
>             !p.public as anonymous
>          from :_poll p
>          join :_thread t
>             on p.pollid = t.pollid", $Poll_Map);
>       
>       $PollOption_Map = array(
>          'optionid' => 'PollOptionID', // calc
>          'pollid' => 'PollID',
>          'body' => 'Body', // calc
>          'sort' => 'Sort', // calc
>          'dateline' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
>          'postuserid' => 'InsertUserID'
>       );
>       $Sql = "select 
>          p.*,
>          'BBCode' as Format,
>          t.postuserid
>       from :_poll p
>       join :_thread t
>          on p.pollid = t.pollid";
>       
>       // Some custom programming needs to be done here so let's do that.
>       $ExportStructure = $Ex->GetExportStructure($PollOption_Map, 'PollOption', $PollOption_Map);
>       $RevMappings = $Ex->FlipMappings($PollOption_Map);
>       
>       $Ex->WriteBeginTable($fp, 'PollOption', $ExportStructure);
>       
>       $r = $Ex->Query($Sql);
>       $RowCount = 0;
>       while ($Row = mysql_fetch_assoc($r)) {
>          $Options = explode('|||', $Row['options']);
>          
>          foreach ($Options as $i => $Option) {
>             $Row['optionid'] = $Row['pollid'] * 1000 + $i + 1;
>             $Row['body'] = $Option;
>             $Row['sort'] = $i;
>             
>             $Ex->WriteRow($fp, $Row, $ExportStructure, $RevMappings);
>             
>             $RowCount++;
>          }
475a885,887
>       mysql_free_result($r);
>       $Ex->WriteEndTable($fp);
>       $Ex->Comment("Exported Table: PollOption ($RowCount rows)");
477,478c889,896
<       // End
<       $Ex->EndExport();
---
>       $PollVote_Map = array(
>           'userid' => 'UserID',
>           'optionid' => 'PollOptionID',
>           'votedate' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate'))
>       );
>       $Ex->ExportTable('PollVote',
>          "select pv.*, pollid * 1000 + voteoption as optionid
>          from :_pollvote pv", $PollVote_Map);
490,494c908
<     * changed when upgrading to 3.x so older forums will need those too.
<     *
<     * This assumes the user is going to copy their entire attachments directory
<     * into Vanilla's /uploads folder and then use our custom plugin to convert
<     * file extensions.
---
>     * moved when upgrading to 3.x so older forums will need those too.
507c921
<          return $Row['hash'].'.file';//.$Row['extension'];
---
>          $FilePath = $Row['hash'].'.file';//.$Row['extension'];
516c930,934
<          return implode('/', $DirParts).'/'.$Row['attachmentid'].'.attach';//.$Row['extension'];
---
>          
>          // 3.x uses attachmentid, 4.x uses filedataid
>          $Identity = (isset($Row['filedataid'])) ? $Row['filedataid'] : $Row['attachmentid'];
>          
>          $FilePath = implode('/', $DirParts).'/'.$Identity.'.attach';
517a936,937
>       
>       return 'attachments/'.$FilePath;
543,551c963,968
<     * Create Photo path from avatar data.
<     * 
<     * @access public
<     * @see ExportModel::_ExportTable
<     * 
<     * @param string $Value Ignored.
<     * @param string $Field Ignored.
<     * @param array $Row Contents of the current attachment record.
<     * @return string Path to avatar if one exists, or blank if none.
---
>     * Determine if this usergroup could likely sign in to forum based on its name.
>     *
>     * @param $Value
>     * @param $Field
>     * @param $Row
>     * @return bool
553,559d969
<    function BuildAvatar($Value, $Field, $Row) {
<       if ($Row['avatarrevision'] > 0)
<          return 'userpics/avatar' . $Row['userid'] . '_' . $Row['avatarrevision'] . '.gif';
<       else
<          return '';
<    }
<    
569a980,1000
>    /**
>     * Retrieve a value from the vBulletin setting table.
>     *
>     * @param string $Name Variable for which we want the value.
>     * @return mixed Value or FALSE if not found.
>     */
>    function GetConfig($Name) {
>       $Sql = "select * from :_setting where varname = '$Name'";
>       $Result = $this->Ex->Query($Sql, TRUE);
>       if ($Row = mysql_fetch_assoc($Result)) {
>          return $Row['value'];
>       }
>       return FALSE;
>    }
>    
>    /**
>     * @param $Value
>     * @param $Field
>     * @param $Row
>     * @return bool
>     */
580a1012,1015
>    /**
>     * @param $ColumnGroups
>     * @param $Map
>     */
588c1023
<                $Map[$Column] = array('Column' => $Column, 'Type' => 'tinyint(1)', 'Filter' => array($this, FilterPermissions));
---
>                $Map[$Column] = array('Column' => $Column, 'Type' => 'tinyint(1)', 'Filter' => array($this, 'FilterPermissions'));
597c1032
< ?>
\ No newline at end of file
---
> ?>
Only in ./: class.webwiz.php
Only in ./: class.xenforo.php
Only in ./: class.yaf.php
Only in ./: functions.commandline.php
Only in ./: functions.php
Only in ./: .git
Only in ./: .gitignore
diff /home/zero/porterplus/index.php ./index.php
2,3d1
< define('APPLICATION', 'Vanilla 2 Exporter Plus');
< define('APPLICATION_VERSION', 'b0.1');
5,7c3,4
<  * Vanilla 2 Exporter Plus is a modified version or fork of Vanilla 2 Exporter to provide various parsing options. 
<  * Which carries the following GPL:
<  *
---
>  * Vanilla 2 Exporter
>  * 
9,17c6,7
<  * To use this script copy it to your web server and open it in your browser.
<  * If you have a larger database the directory should be writable so that the export file can be saved locally and zipped.
<  *
<  * Copyright 2010 Vanilla Forums Inc.
<  * This file is part of Garden.
<  * Garden is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
<  * Garden is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
<  * You should have received a copy of the GNU General Public License along with Garden.  If not, see <http://www.gnu.org/licenses/>.
<  * Contact Vanilla Forums Inc. at support [at] vanillaforums [dot] com
---
>  * To use this script, copy it to your web server and open it in your browser.
>  * If you have a large database, make the directory writable so that the export file can be saved locally and zipped.
18a9,10
>  * @copyright 2010 Vanilla Forums Inc.
>  * @license GNU GPLv2
20a13,14
> define('APPLICATION', 'Porter');
> define('APPLICATION_VERSION', '2.0.0');
22c16
< if(defined('DEBUG'))
---
> if(TRUE || defined('DEBUG'))
28,29d21
<  
< global $Supported;
31a24,32
> global $Supported;
> 
> // Support Files
> include_once 'class.exportmodel.php';
> include_once 'views.php';
> include_once 'class.exportcontroller.php';
> include_once 'functions.php';
> 
> // Set Vanilla to appear first in the list.
34,41c35
<    'vanilla2' => array('name'=> 'Vanilla 2.*', 'prefix'=>'GDN_'),
<    'vbulletin' => array('name'=>'vBulletin 3.* and 4.*', 'prefix'=>'vb_'),
<    'phpbb2' => array('name'=>'phpBB 2.*', 'prefix' => 'phpbb_'),
<    'phpbb3' => array('name'=>'phpBB 3.*', 'prefix' => 'phpbb_'),
<    'bbPress' => array('name'=>'bbPress 1.*', 'prefix' => 'bb_'),
<    'SimplePress' => array('name'=>'SimplePress 1.*', 'prefix' => 'wp_'),
<    'SMF' => array('name'=>'SMF (Simple Machines) 1.*', 'prefix' => 'smf_'),
<    'punbb' => array('name'=>'PunBB 1.*', 'prefix' => 'punbb_')
---
>    'vanilla2' => array('name'=> 'Vanilla 2.*', 'prefix'=>'GDN_')
44,61c38,46
< // Support Files
<  /*Porter Plus*/
<  include('class.bbcode.php');
<  /*Porter Plus*/
< include('class.exportmodel.php');
< include('views.php');
< include('class.exportcontroller.php');
< include('class.csv.php');
< 
< include('class.vanilla1.php');
< include('class.vanilla2.php');
< include('class.vbulletin.php');
< include('class.phpbb2.php');
< include('class.phpbb3.php');
< include('class.bbpress.php');
< include('class.simplepress.php');
< include('class.smf.php');
< include('class.punbb.php');
---
> // Include individual software porters.
> // MAKESKIPSTART
> $Paths = glob(dirname(__FILE__).'/class.*.php');
> foreach ($Paths as $Path) {
>    include_once $Path;
> }
> // MAKESKIPEND
> 
> include_once 'functions.commandline.php';
67d51
< 
72c56
<    ParseCommandLine($argv);
---
>    ParseCommandLine();
85a70,73
> $Method = 'DoExport';
> //if (isset($_POST['doavatars']) && $_POST['doavatars'])
>    //$Method = 'DoAvatars';
> 
91c79,83
<    $Controller->DoExport();
---
>    if (!method_exists($Controller, $Method)) {
>       echo "This datasource type does not support {$Method}.\n";
>       exit();
>    }
>    $Controller->$Method();
101,102c93,95
< function ErrorHandler() {
<    echo "Error";
---
> function ErrorHandler($errno, $errstr) {
>    echo "Error: ({$errno}) {$errstr}\n";
>    die();
123,182d115
< function ParseCommandLine($Argv) {
<    global $Supported;
< 
<    $Args = array(
<        'type' => 'The type of forum being exported ('.implode(', ', array_keys($Supported)).').',
<        'prefix' => 'The database table prefix.',
<        'dbhost' => 'The database host.',
<        'dbname' => 'The database name.',
<        'dbuser' => 'The database user.',
<        'dbpass' => 'The database password.',
<        'savefile' => 'Whether or not to save the file.',
< 	/*Porter Plus*/
<         'utf8force' => 'Forces UTF-8 on text fields',
<        'bbcode2html' => 'Coverts BBCode to html ',
<        'phpBBfixes' => 'Converts internal links vanilla style',
<        'searchreplace' => 'Searches and replaces e.g \'{"www.mysite.com":{"repl":"mysite.com", "regexp":0}}\''
< 	/*Porter Plus*/
< 	);
< 
<    $Script = $Argv[0];
<    unset($Argv[0]);
< 
<    if (count($Argv) == 0) {
<       echo "usage: php $Script parm1=value ...\n";
<       foreach ($Args as $Name => $Help) {
<          echo " $Name: $Help\n";
<       }
< 
<       die();
<    }
< 
<    $Errors = 0;
<    foreach ($Argv as $Arg) {
<       $Parts = explode('=', $Arg, 2);
<       if (count($Parts) < 2) {
<          echo "Malformed argument $Arg.\n";
<          $Errors++;
<          continue;
<       }
< 
<       list($Name, $Value) = $Parts;
< 
<       $_POST[$Name] = $Value;
<       unset($Args[$Name]);
<    }
<    /*Porter Plus*/
<    unset($Args['utf8force']);
<    unset($Args['bbcode2html']);
<    unset($Args['phpBBfixes']);
<    unset($Args['searchreplace']);
<    $_POST['searchreplace'] = array_key_exists('searchreplace',$_POST) ? json_decode($_POST['searchreplace'],TRUE) : array();
<    /*Porter Plus*/
<    if (count($Args) > 0) {
<       $Errors++;
<       echo "Missing arguments: ".implode(', ', array_keys($Args));
<    }
<    if ($Errors)
<       die("\n$Errors error(s)\n");
< }
< 
196d128
< ?>
Only in ./: LICENSE.txt
diff /home/zero/porterplus/make.php ./make.php
1,23c1
< <html>
< <head>
<    <title>Make</title>
< </head>
< <body>
<    <pre><?php
<    // Make the final vanilla2export.php file from the other sources.
< 
<    // Open the file.
<    $Path = dirname(__FILE__).'/vanilla2export.php';
<    echo "Opening $Path\n";
<    $fp = fopen($Path, 'w');
< 
<    fwrite($fp, "<?php /* This file was automatically generated by make.php. DO NOT EDIT. */ ?>\n\n");
< 
<    AddFile($fp, 'index.php');
< 
<    fclose($fp);
<    echo "Make Complete.\n";
< 
<    ?></pre>
< </body>
< </html>
---
> #!/opt/local/bin/php
24a3,26
> header('Content-Type: text/plain');
> 
> // Make the final vanilla2export.php file from the other sources.
> $Path = dirname(__FILE__).'/vanilla2export.php';
> 
> if (file_exists($Path)) {
>    $r = unlink($Path);
>    if (!$r) {
>       echo "Could not delete $Path.\n";
>       die();
>    }
> }
> 
> // Open the file.
> echo "Opening $Path\n";
> $fp = fopen($Path, 'w');
> 
> fwrite($fp, "<?php /* This file was automatically generated by make.php. DO NOT EDIT. */ ?>\n\n");
> 
> AddFile($fp, 'index.php');
> 
> fclose($fp);
> echo "Make Complete.\n";
> 
26a29
>    // Recursively build file
27a31,41
> 
>    // Include individual software porters (undo MAKESKIP)
>    $Paths = glob('class.*.php');
>    $Exporters = '';
>    foreach ($Paths as $Path) {
>       if (strstr($Path, 'export') === FALSE && strstr($Path, 'skeleton') === FALSE)
>          $Exporters .= GetFile($Path);
>    }
>    $Contents = str_replace('// [EXPORTERS]', ' ?>'.$Exporters.'<?php ', $Contents);
> 
>    // Write the all-in-one file
36a51,53
>    // MAKESKIP
>    $Contents = preg_replace('/MAKESKIPSTART(.*)MAKESKIPEND/s', '[EXPORTERS]', $Contents);
> 
41c58
<    $Contents = preg_replace_callback('/include\([\'"](.*?)[\'"]\);/', 'ReplaceIncludeCallback', $Contents);
---
>    $Contents = preg_replace_callback('/include_once [\'"](.*?)[\'"]\;/', 'ReplaceIncludeCallback', $Contents);
Only in /home/zero/porterplus: PasswordHash.php
Only in /home/zero/porterplus: phpBB.txt
Only in ./: porterplus.diff
Only in /home/zero/porterplus: README
Only in ./: README.md
diff /home/zero/porterplus/style.css ./style.css
3c3
<    background: none top center no-repeat #C7E6FB;
---
>    background: url('http://vanillaforums.com/porter/slicesplash.jpg') top center no-repeat #C7E6FB;
36c36
< 	text-align:center;
---
> 	padding: 0 0 0 270px;
41,45d40
< div.Title span.Version{
< 	clear:both;
< 	padding-left:5px;
< }
< 
233,293c228
< }
< 
< .Annotation {
< 	font-size: 13px;
< 	color: #555;
< 	font-weight: normal;
< 	padding: 0 0 0 10px;
< }
< 
< table{
< 	border-collapse:collapse;
< 	width:100%;
< }
< 
< tr.PorterPlusRow{
< 	border: 1px solid #aaa;
< 	background-color:#D1F0FF;
< 	line-height:100%;
< 	height:50px;
< 	width:600px;
< 	cursor:row-resize;
< }
< 
< tr.PorterPlusRow td{
< 	vertical-align:middle;
< 	height:50px;
< 	overflow:hidden;
< 	
< }
< 
< tr.PorterPlusRow td *{
< 	cursor:auto;
< }
< 
< 
< .Repl {
< 	padding-left:20px;
< }
< 
< .Repl *{
< 	vertical-align:middle;
< }
< 
< form input.ReplBox{
<    border: 1px solid #ccc;
<    color: #555;
<    width:180px;
< }
< 
< .SearchAn,.ReplaceAn{
< 	position:absolute;
< 	text-align:left;
< 	margin-left:-180px;
< 	font-size:x-small;
< 	font-style:oblique;
< 	color:#555;
< 	margin-top:-15px;
< 	height:5px;
< 	
< }
< 
---
> }
\ No newline at end of file
Only in /home/zero/porterplus: test.php
Only in ./: utilities
Only in /home/zero/porterplus: vanilla2export.php
Only in /home/zero/porterplus: VanillaPorter
diff /home/zero/porterplus/views.php ./views.php
20c20
<    <title>Vanilla Porter Plus</title>
---
>    <title>Vanilla Porter - Forum Export Tool</title>
22,50d21
< <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
< <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.min.js" type="text/javascript"></script>
< <script type="text/javascript">
< 	(function($){
< 		$(document).ready(function(){
< 			$('form').delegate('input.ReplBox','keydown', function(){
< 				var sr = $('tr.PorterPlusRow:has(.Repl):first').clone();
< 				sr.find('input[type="text"]').val('');
< 				sr.find('input[type="checkbox"]').removeAttr('checked');
< 				if($('input.ReplBoxS:last').val()){
< 
< 					$('#PorterPlusOptions tbody').append(sr);
< 				}
< 			});
< 			
< 			var fixHelper = function(e, ui) {
< 				ui.children('td').each(function() {
< 					$(this).width($(this).width());
< 				});
< 				return ui;
< 			};
< 			$("#PorterPlusOptions tbody").sortable({
< 					helper:fixHelper
< 			});
< 
< 		});
< 	
< 	})(jQuery)
< </script>
57c28,29
<             <p>Vanilla Porter Plus <span class="Version">Version <?php echo APPLICATION_VERSION; ?></span></p>
---
>             <img src="http://vanillaforums.com/porter/vanilla_logo.png" alt="Vanilla" />
>             <p>Vanilla Porter <span class="Version">Version <?php echo APPLICATION_VERSION; ?></span></p>
96,103d67
<    if (defined('CONSOLE')) {
<       echo $msg;
<       return;
<    }
<    /*Porter plus*/
<    $SearchRepl = array_filter(GetValue('replsearch',null,array())) ;
<    $SearchRepl[]="";
<    /*Porter plus*/
107a72
>    
109a75,82
>    if (!$CanWrite) {
>       $msg = 'The porter does not have write permission to write to this folder. You need to give the porter permission to create files so that it can generate the export file.'.$msg;
>    }
>    
>    if (defined('CONSOLE')) {
>       echo $msg."\n";
>       return;
>    }
115c88
<       <a href="http://vanillaforums.com/blog/help-topics/importing-data" style="text-decoration:underline;">see these instructions</a>.
---
>       <a href="http://docs.vanillaforums.com/developers/importing/porter" style="text-decoration:underline;">see these instructions</a>.
139c112
<                <input class="InputBox" type="text" name="prefix" value="<?php echo urlencode(GetValue('prefix')) != '' ? urlencode(GetValue('prefix')) : $forums['vanilla1']['prefix']; ?>" id="ForumPrefix" />
---
>                <input class="InputBox" type="text" name="prefix" value="<?php echo htmlspecialchars(GetValue('prefix')) != '' ? htmlspecialchars(GetValue('prefix')) : $forums['vanilla1']['prefix']; ?>" id="ForumPrefix" />
143c116
<                <input class="InputBox" type="text" name="dbhost" value="<?php echo urlencode(GetValue('dbhost', '', 'localhost')) ?>" />
---
>                <input class="InputBox" type="text" name="dbhost" value="<?php echo htmlspecialchars(GetValue('dbhost', '', 'localhost')) ?>" />
147c120
<                <input class="InputBox" type="text" name="dbname" value="<?php echo urlencode(GetValue('dbname')) ?>" />
---
>                <input class="InputBox" type="text" name="dbname" value="<?php echo htmlspecialchars(GetValue('dbname')) ?>" />
151c124
<                <input class="InputBox" type="text" name="dbuser" value="<?php echo urlencode(GetValue('dbuser')) ?>" />
---
>                <input class="InputBox" type="text" name="dbuser" value="<?php echo htmlspecialchars(GetValue('dbuser')) ?>" />
157,187d129
< 	    <!-- -porter plus options-->
<             <li>
<                <label>Parse Operations</label>
< 	       <table id="PorterPlusOptions">
< 	       <tbody>
< 			<tr class="PorterPlusRow">
< 	       <td><input class="CheckBox" type="checkbox" name="repl[]" value="phpBBfixes" <? echo GetValue('phpBBfixes')?'checked="checked"':''?> /></td><td><span class="Annotation">phpBB fixes (internal links,clean up smilies,quotes, etc)</span></td>
< 			</tr>
< 			<tr class="PorterPlusRow">
<               <td><input class="CheckBox" type="checkbox" name="repl[]" value="bbcode2html" <? echo GetValue('bbcode2html')?'checked="checked"':''?> /></td><td><span class="Annotation">Convert bbcode to html</span></td>
< 			</tr>
< 			<tr class="PorterPlusRow">
< 			<td colspan="2">
< 				<div class="Repl">
< 					<input type="hidden" name="repl[]" value="replsearch"><input class="ReplBox ReplBoxS" type="text" name="replsearch[]"><span class="SearchAn">Search</span><span class="Annotation">to&nbsp;&nbsp;</span>
< 					<input class="ReplBox" type="text" name="replrepl[]"><span class="ReplaceAn">Replace</span>&nbsp;<input class="CheckBox" type="checkbox" name="replrexp[]"><a class="Annotation" href="http://www.php.net/manual/en/book.pcre.php">PCRE</a>
< 				</div>
< 			</td>
< 			</tr>
< 			</tbody>
< 		</table>
<             </li>
< 	    <!-- -porter plus options end-->
<             <?php if($CanWrite): ?>
<             <li>
<                <label>
<                   <input class="CheckBox" type="checkbox" id="savefile" name="savefile" value="savefile" <?php if(GetValue('savefile')) echo 'checked="checked"'; ?> />
<                   Save the export file to the server
<                </label>
<             </li>
<             <?php endif; ?>
214a157,163
>    if (defined('CONSOLE')) {
>       foreach($Msgs as $Msg) {
>          
>       }
>       return;
>    }
>    
236c185
< ?>
---
> ?>
\ No newline at end of file
